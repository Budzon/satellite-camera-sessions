using System;
using System.Data;
using System.IO;
using System.Windows.Media.Media3D;
using System.ComponentModel;

namespace Astronomy
{
    /// <summary>
    /// Represents an orbital knot of the space object
    /// </summary>
    public class OrbitNode : INotifyPropertyChanged
    {
        private Vector3D velocity;
        private Point3D position;
        private DateTime time;
        private double _Bk;
        private double _F;
        private double _F81;
        private double _Ap;

        /// <summary>
        /// An velocity value of the object at the knot
        /// </summary>
        public Vector3D Velocity
        {
            get { return velocity; }
            set { velocity = value; RaisePropertyChanged("Velocity"); }
        }

        public Point3D Position
        {
            get { return position; }
            set { position = value; RaisePropertyChanged("Position"); }
        }

        /// <summary>
        /// A UTC time of the knot
        /// </summary>
        public DateTime Time
        {
            get { return time; }
            set { time = value; RaisePropertyChanged("Time"); }
        }

        public double Bk
        {
            get { return _Bk; }
            set { _Bk = value; RaisePropertyChanged("Bk"); }
        }
        public double F
        {
            get { return _F; }
            set { _F = value; RaisePropertyChanged("F"); }
        }
        public double F81
        {
            get { return _F81; }
            set { _F81 = value; RaisePropertyChanged("F81"); }
        }
        public double Ap
        {
            get { return _Ap; }
            set { _Ap = value; RaisePropertyChanged("Ap"); }
        }


        public event PropertyChangedEventHandler PropertyChanged;

        private void RaisePropertyChanged(string name)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(name));
        }
    }

    public class GraviationField
    {
        int NHarm;                // number of used harmonics
        double GravityConstant;   // Gravity constant
        double Rad;               // Radius of Earth 

        const double eps = 2e-12;
        double[] EG_coeff;
        public GraviationField(int NH, double GC, double R)
        {
            NHarm = NH;
            GravityConstant = GC;
            Rad = R;

            // Initialization of EarthCoeff
            EG_coeff = new double[] 
      {
         0.0,
         0.0,
         0.0,
         0.0,
        -1.08262574052279E-0003,
         6.45497224367903E-0011,
         1.29099444873581E-0011,
         1.57421281089947E-0006,
        -9.03489555003266E-0007,
         2.53240732489858E-0006,
         2.19570735232408E-0006,
         2.68983142687418E-0007,
         3.09751659053937E-0007,
        -2.11527804661704E-0007,
         9.98400353996888E-0008,
         1.95323860927890E-0007,
         1.63056000000000E-0006,
        -5.04073383586160E-0007,
        -4.47731082514940E-0007,
         7.82713234844026E-0008,
         1.45715605821751E-0007,
         5.91207879321165E-0008,
        -1.18130419603565E-0008,
        -4.08315149315715E-0009,
         6.31245712856729E-0009,
         2.27918455593223E-0007,
        -5.76836577665922E-0008,
        -7.24128577901282E-0008,
         1.05506526537010E-0007,
        -5.28034320313151E-0008,
        -1.49133679762434E-0008,
        -6.64288219369317E-0009,
        -2.28285841754663E-0009,
         4.23417718019665E-0010,
         4.71690710389379E-0010,
        -1.64876302913262E-0009,
        -5.17216330465309E-0007,
        -6.11025612431769E-0008,
         2.53426924754408E-0008,
         4.72981490627477E-0009,
        -4.53810936259857E-0008,
         1.17457484850283E-0009,
         5.47374686680931E-0011,
        -3.44061642923755E-0010,
        -1.76085063067899E-0009,
        -2.16866586608184E-0010,
        -4.31788145216943E-0010,
         3.48770699431053E-0012,
        -5.47269454217464E-0011,
         3.50078964663688E-0007,
         2.04990250073022E-0007,
         6.34286252412899E-0008,
         3.19823255381062E-0008,
         9.64848294885189E-0009,
         3.41132429016920E-0009,
        -3.45006052684426E-0009,
        -5.76347267617025E-0010,
        -2.58667184954238E-0010,
         6.22902122868209E-0013,
         5.43269749206080E-0012,
        -2.48327256286142E-0011,
         1.04572726701708E-0011,
         2.63788615038100E-0013,
         6.05118468533251E-0013,
         2.01331247698910E-0007,
         1.61831895805493E-0008,
         4.02140235351909E-0008,
         5.72804120374025E-0009,
         4.32847392367524E-0009,
        -1.96336682342075E-0010,
        -9.15563849273857E-0010,
        -3.17189362353955E-0010,
         8.64302509055998E-0011,
        -3.92585701111595E-0012,
         1.46282970787640E-0011,
        -1.85418451145217E-0012,
         8.65286105344347E-0012,
         3.49642166353738E-0013,
         3.76004278065110E-0013,
        -1.44915128595205E-0013,
         1.61499803322718E-0013,
         1.24751687764134E-0007,
         9.01708434152760E-0008,
         1.23329437776316E-0008,
         1.50171834236583E-0009,
        -1.88892339466403E-0009,
        -1.31413262095366E-0009,
        -6.74675748059199E-0010,
        -6.03297297849600E-0012,
         1.51209407844006E-0011,
        -2.39029749047820E-0012,
        -6.46208795243529E-0012,
         9.15326786626061E-0013,
         2.86746054506225E-0012,
        -2.30307306327878E-0013,
        -1.86071684183968E-0013,
         5.79974727523121E-0014,
        -2.32068336644170E-0016,
        -3.07007944479345E-0015,
         8.13782915316266E-0015,
         2.23721345427744E-0007,
         4.42982819490368E-0008,
        -7.68005783714017E-0008,
        -5.15448675300157E-0009,
        -2.02338429120595E-0009,
        -1.48675680734806E-0011,
        -8.89488700113806E-0010,
        -4.91488158076428E-0011,
        -4.43664505067673E-0011,
        -2.62420470908814E-0012,
        -3.12148125793592E-0012,
        -2.48278669462373E-0013,
        -5.62704828999568E-0013,
         9.67974358728438E-0015,
         9.25888517044593E-0017,
         5.15673273910479E-0015,
        -9.98014490355843E-0015,
         2.36020346164068E-0015,
        -7.78744505411439E-0016,
         4.04065663516179E-0016,
        -9.78482917820671E-0017,
        -2.41470117198795E-0007,
         5.20077252420108E-0009,
        -2.11100596442032E-0008,
         9.13311350185479E-0010,
        -5.38719081557818E-0009,
        -1.88558401866029E-0010,
        -6.99852404968997E-0010,
        -1.68003091787142E-0011,
        -2.72341854054946E-0011,
         1.97102153542533E-0012,
         2.18745991153986E-0012,
         9.88801240904987E-0015,
         1.36029110949997E-0013,
         5.08271132422283E-0015,
        -3.62516910624716E-0014,
        -2.68173354985630E-0016,
         9.04549202695756E-0016,
        -2.32385216920047E-0016,
         2.37919662414306E-0016,
        -4.08109216361218E-0017,
        -2.64924652890147E-0017,
         8.60785978433938E-0018,
        -1.01756838343659E-0017,
         1.76400000000000E-0007,
        -2.95071395098082E-0008,
        -2.01828381336274E-0008,
         5.27831982482685E-0010,
         1.05703258721900E-0009,
         2.25357537118286E-0010,
         1.07910873558954E-0010,
        -2.09278307885879E-0011,
         4.06636878271287E-0013,
         1.06469693572965E-0012,
         3.49220594919326E-0013,
         2.95460060606759E-0014,
         1.11852737229702E-0013,
        -3.29581036733213E-0015,
         7.34006284638321E-0015,
        -4.18194806043558E-0016,
         3.77330310922998E-0016,
         1.04124762838501E-0016,
         5.76720818142037E-0017,
        -6.86032262113551E-0019,
         9.84903708477802E-0018,
         4.33625389432311E-0019,
        -2.55073758489595E-0019,
        -2.30709400364753E-0020,
        -1.02338021951680E-0019,
         2.27279706969188E-0007,
        -2.90599999810925E-0008,
         2.26052483451798E-0008,
         2.01943888409464E-0009,
        -2.55454552849286E-0009,
        -8.13742383732663E-0011,
         2.33748188301996E-0010,
        -2.01856430878967E-0012,
        -2.57484307760729E-0012,
         1.16418612997194E-0012,
         1.15662528230382E-0012,
        -3.90096833071538E-0014,
        -4.09840997935588E-0015,
         4.28549031437092E-0016,
        -9.02607694531221E-0016,
        -7.43292041288898E-0017,
        -5.02285227901286E-0017,
         2.05630713696122E-0017,
         5.04251609147254E-0017,
         4.06043765359179E-0018,
        -3.70331617261694E-0018,
        -5.52014795958861E-0019,
         3.23240021534228E-0020,
        -5.92590294449385E-0020,
         1.66694007890768E-0019,
        -2.19369655861314E-0020,
         2.50802272105662E-0020,
        -1.20843098272098E-0007,
        -7.43636656029325E-0009,
         1.50356499851583E-0008,
        -1.24623168255080E-0009,
         3.06091992205460E-0011,
         1.27716922020965E-0010,
         3.89579983871381E-0011,
         6.78104466995316E-0013,
        -2.68522116475953E-0012,
         4.00530414053815E-0013,
        -2.35582913487810E-0013,
        -2.21770895760878E-0014,
         7.58844709632711E-0015,
         2.23216615395959E-0015,
        -3.84256321996433E-0016,
        -2.14616433683734E-0016,
        -8.97841541653337E-0017,
         1.26863377367395E-0017,
         1.70967209990006E-0017,
         1.58912956312651E-0018,
         4.40503872938198E-0020,
         7.93854291445612E-0020,
        -1.73833248783138E-0019,
         4.67666181909540E-0021,
        -1.75374818216078E-0020,
         2.31210617834384E-0021,
         3.29591903453307E-0021,
        -7.27417443235960E-0022,
        -5.75148035323086E-0023,
         2.89523746867161E-0009,
         9.15385305941347E-0009,
         5.41302249210180E-0009,
        -6.32891277430507E-0010,
        -1.02626565809268E-0009,
         9.97182866013414E-0011,
         2.27865976726175E-0011,
        -5.22900255200071E-0012,
         5.23470795576721E-0013,
         9.75108647189886E-0014,
         1.08858282901277E-0013,
         2.33520317370424E-0014,
        -2.22637301727131E-0014,
         2.43863806246804E-0015,
         4.90462886282491E-0017,
        -1.27141947389370E-0016,
         9.07064098274177E-0017,
         2.69572334494097E-0018,
         1.10243014405049E-0017,
         1.45422533910068E-0019,
         4.29478296683197E-0019,
        -1.95926023410917E-0021,
         3.90123287791737E-0020,
        -6.33423510554427E-0021,
         2.89633685742278E-0021,
        -5.75363361553292E-0022,
        -9.09529884544461E-0023,
         2.35146977273475E-0023,
        -6.78960416361702E-0023,
        -6.09166977346527E-0024,
        -5.49217211321948E-0024,
        -1.75209160719410E-0008,
         1.10242130571489E-0008,
         1.78416888708638E-0008,
        -5.09329712991445E-0010,
         1.06332695231351E-0009,
        -4.71467960539342E-0011,
        -4.53822376051319E-0011,
         4.60189696560048E-0012,
         5.86835907329979E-0012,
        -3.47554753422442E-0014,
         1.05558985027064E-0014,
         1.28326096521522E-0015,
        -1.43605210891531E-0014,
        -2.52629674413372E-0016,
        -3.42724112517418E-0016,
        -6.01003225089426E-0017,
         1.18046808511707E-0017,
        -3.10895467621106E-0018,
        -4.89700632936871E-0018,
        -1.87248264860755E-0019,
         1.40354786356496E-0019,
         1.59908837981225E-0020,
        -1.39014083151678E-0021,
         1.46536075480039E-0021,
         4.89414634780847E-0022,
         8.67996869664306E-0023,
         3.21232457547314E-0024,
        -1.34526431221736E-0023,
        -2.75683950296037E-0023,
        -9.97140251447176E-0025,
        -3.11147178191918E-0024,
        -6.31123599475639E-0025,
         1.24324222230458E-0025,
         1.15541038163936E-0007,
        -1.16271497414934E-0008,
        -8.11652534402072E-0009,
        -5.25315594284247E-0010,
         2.59777476651270E-0010,
         3.95941383511120E-0012,
         1.36203835927825E-0011,
         3.32521494052755E-0013,
         1.82886821729015E-0012,
        -3.09682928151772E-0014,
         4.11272036857644E-0014,
        -1.74571838572012E-0015,
        -1.29301514332151E-0014,
         5.98313808277827E-0016,
        -1.57216715939084E-0016,
         4.23836178467645E-0017,
        -6.39849303242218E-0019,
         1.83207767737177E-0019,
        -2.38755693662969E-0018,
         4.15523655435571E-0021,
         1.04336282248411E-0019,
        -9.00978884975759E-0021,
         2.96396032106195E-0021,
         8.42691751911765E-0022,
         5.00560133542321E-0022,
         3.86307360649358E-0023,
         5.05093728223624E-0023,
        -2.93577597360873E-0024,
         2.77305397969046E-0024,
         1.14639565942666E-0025,
         1.44625770313987E-0025,
        -8.64272758865020E-0026,
         1.56727517376311E-0026,
        -1.90048860191842E-0026,
        -9.48540045231123E-0027,
         7.47571514973651E-0008,
        -8.69850091272370E-0010,
        -1.80110136545808E-0008,
         1.33450135887866E-0010,
         1.73308588572710E-0010,
         6.59218251577032E-0012,
        -6.37198435240430E-0012,
         3.52281382941298E-0012,
        -4.21222470785724E-0013,
         3.10310265517610E-0014,
         1.20619922256301E-0013,
         2.42125735059364E-0015,
        -2.82041823662438E-0015,
         6.43067847724037E-0017,
        -3.20153949939864E-0017,
         2.61118619619738E-0017,
         4.73277498060775E-0019,
        -9.85252733924574E-0019,
         1.33088574945457E-0018,
         3.50367434477273E-0020,
        -2.23359239479262E-0020,
        -2.81578293632417E-0021,
        -1.58143899414268E-0022,
        -3.94142311723083E-0022,
        -2.21519033881042E-0022,
        -7.46139518842549E-0024,
        -3.58417158842333E-0023,
        -7.47613266692954E-0025,
        -9.31641147725066E-0025,
        -2.48558379799376E-0025,
        -1.28569610724764E-0025,
         9.37425020181447E-0027,
         3.39851971062760E-0027,
         4.22279580370198E-0028,
         4.42589620307842E-0028,
         5.48653162204432E-0029,
        -1.35259224306954E-0028,
        -2.06709433746987E-0008,
        -3.88725285218779E-0009,
         6.23863307396572E-0009,
         7.72024422177020E-0010,
        -1.16980458778407E-0010,
        -1.36160847372194E-0011,
        -6.14531258051493E-0013,
         1.66768651904768E-0012,
        -8.35413585812963E-0014,
         5.44252528661949E-0014,
         5.23727189989783E-0014,
         6.54736185984706E-0016,
         2.85429585944144E-0015,
         1.10688909885177E-0017,
        -7.76747393715983E-0017,
         1.34751716381955E-0017,
        -3.04795548959184E-0018,
         9.68914659195358E-0020,
         1.17001015450006E-0019,
        -5.02050119022508E-0020,
        -2.37069282859880E-0020,
         1.56797819065877E-0021,
         1.07689613233439E-0021,
        -6.00166030115844E-0023,
        -1.38978539231895E-0023,
        -4.64756697217121E-0024,
        -1.25706060947096E-0023,
        -1.72367103738644E-0025,
        -4.33380146542877E-0025,
        -4.09189033179837E-0026,
        -3.59079114655045E-0026,
        -2.68149596307099E-0027,
        -2.18350385564352E-0027,
         7.44797183517437E-0028,
        -3.24991237350061E-0028,
         7.72729300541316E-0029,
        -3.03045101536998E-0029,
        -7.87802280892522E-0031,
         5.68067232937696E-0030,
         1.55595918969618E-0007,
         3.95462508005620E-0009,
        -2.52742519082922E-0009,
         4.31590826334582E-0010,
         3.45791348089801E-0010,
        -7.01032100777238E-0013,
         3.10790898011242E-0011,
         1.62488401930984E-0013,
        -8.12967862088354E-0013,
        -5.94213249779974E-0015,
        -6.54686279624839E-0015,
         9.26639541470022E-0016,
         7.90838919013209E-0016,
        -1.47571660276833E-0016,
         8.69679854067647E-0018,
        -1.37109756637744E-0018,
         1.91307592376747E-0018,
         2.64556278818509E-0019,
         1.09670602855673E-0019,
        -2.59386393208002E-0020,
        -7.88009295821777E-0021,
         1.05152350865936E-0021,
        -1.04069546337568E-0021,
        -1.99212979021338E-0023,
         6.67115349676438E-0023,
         6.00818486373763E-0024,
         9.20644158495745E-0025,
         1.58948774427091E-0025,
        -1.77332529476488E-0025,
        -2.38887067111278E-0026,
        -3.40570205971552E-0027,
        -6.47343779542035E-0028,
         8.00087817411504E-0030,
         4.47812211710981E-0029,
        -6.74408778117472E-0029,
         8.62907667190502E-0030,
         6.15962643679139E-0031,
        -2.96729169358105E-0031,
         5.41467330409876E-0031,
         2.40600005995245E-0033,
        -5.75435014338628E-0032,
         5.29185288911171E-0008,
        -6.15675980869738E-0009,
         1.91260800504243E-0008,
         4.10373671148342E-0011,
         9.55526930369913E-0011,
         1.80493848634692E-0011,
         3.00791679901133E-0011,
         1.11908012984260E-0013,
         6.09721038997575E-0013,
         6.01997058388483E-0015,
         3.33738720089054E-0015,
         2.07318378354499E-0016,
        -8.29273513417994E-0016,
        -5.19194008642240E-0017,
         1.04086745381095E-0016,
        -1.97868208854337E-0018,
         1.30435510811938E-0019,
         2.15343321959412E-0019,
         1.63002931205388E-0019,
        -3.61829712634917E-0021,
        -5.49205813820857E-0022,
         4.45979233672318E-0022,
        -1.07964856954650E-0021,
         1.10903120123222E-0023,
         2.85883598539862E-0023,
        -1.86620922743570E-0024,
         1.19753844153104E-0024,
         1.22990943863148E-0025,
         5.73180544069964E-0026,
         6.19734499399457E-0027,
         4.30835833683888E-0027,
         2.58489797518596E-0028,
        -1.90307636944305E-0028,
        -1.31706782377127E-0029,
        -3.97305527532812E-0031,
         3.34481101761676E-0030,
        -1.73841105195203E-0030,
        -3.65157040658217E-0031,
         1.90055891141791E-0031,
        -3.70379331146523E-0032,
         1.60016698045121E-0032,
         1.60813859347220E-0033,
        -2.10047640901215E-0033,
        -9.27073783471413E-0008,
         6.64242339342724E-0009,
        -5.03980695564797E-0009,
        -2.88926291695217E-0010,
        -6.80047578632436E-0011,
         9.01457897547220E-0012,
         1.17197927966297E-0011,
        -1.64426384884949E-0013,
         7.68457104531270E-0013,
        -1.89806787034054E-0014,
         1.55857605613329E-0014,
        -1.53248154010727E-0016,
        -1.64250585580728E-0016,
         4.76480165717234E-0017,
         4.44739143958123E-0017,
        -4.30655222115356E-0018,
         1.20046863033753E-0018,
         1.18055592719597E-0019,
         1.31016941011190E-0019,
         5.25790838142025E-0021,
         7.67436050128776E-0021,
        -4.23077184187493E-0023,
        -3.56564569173402E-0022,
         1.02231971035095E-0023,
        -7.84619860001859E-0024,
        -9.30993779949440E-0025,
         1.00857659494523E-0024,
         3.13891823956383E-0026,
         3.09831531706201E-0026,
         4.98322429412940E-0027,
         3.93937949663417E-0028,
         5.09791683173491E-0029,
        -6.03290594497887E-0029,
         8.86271181214134E-0030,
        -7.70575682188643E-0030,
         5.62373054098482E-0031,
        -4.48663589363107E-0031,
         4.60433628079015E-0032,
        -3.85703562788704E-0033,
        -4.13766169653836E-0033,
         8.47576375207859E-0033,
        -1.09961427345459E-0033,
         6.31438733370203E-0034,
        -5.79536667942733E-0035,
         1.71649916709946E-0035,
        -1.54320785055028E-0007,
         6.85844100677977E-0009,
         8.41830304081271E-0009,
        -2.22061054643672E-0010,
        -1.82470137611321E-0010,
        -9.07410433969273E-0012,
        -5.10559563677317E-0012,
        -2.59892777330396E-0013,
         1.70129311843464E-0013,
         9.11819178501208E-0015,
        -5.77438647710318E-0015,
        -8.83045769356042E-0016,
         3.50512596471409E-0016,
        -6.53514048430293E-0018,
         1.50308231138967E-0017,
         4.40154705176487E-0019,
         4.46267964970604E-0019,
         5.16765147955382E-0020,
        -1.84718427616881E-0020,
         4.44752711476754E-0021,
        -2.83000849684566E-0022,
         1.47823764282888E-0022,
         2.56376052340247E-0022,
         9.63549267055841E-0024,
        -8.79788574047235E-0024,
        -3.10385721236031E-0025,
        -1.68970958487518E-0025,
         9.16220471759036E-0027,
        -5.28952024933052E-0027,
         1.48545460659362E-0027,
        -6.21422270953204E-0029,
         4.75667861472268E-0029,
         3.89883789190542E-0029,
        -2.76489646965381E-0031,
        -1.87782551897321E-0030,
         1.54798825770665E-0031,
        -1.09626214691681E-0031,
        -5.70220667033665E-0033,
         1.01879425843348E-0032,
         9.58468597830714E-0034,
        -3.92276462418619E-0034,
         8.74606277672458E-0035,
         1.35311682766826E-0034,
        -1.11605019156995E-0035,
         3.56355978563240E-0036,
        -8.88767147897078E-0037,
        -1.75270109607350E-0036,
        -4.55000000000000E-0009,
         3.03108891324554E-0010,
        -6.37336962158428E-0009,
         1.65267257627460E-0012,
         3.42268490546470E-0010,
        -5.01115731296881E-0012,
        -1.19684609707577E-0011,
         9.67566969034951E-0014,
         2.29028135155961E-0013,
        -2.06685943001102E-0015,
        -1.88804125460557E-0014,
        -2.48527476812628E-0016,
         6.61442991125584E-0017,
        -9.57391051531760E-0018,
        -1.45564617942571E-0017,
         1.48743112978691E-0018,
         2.26866350359191E-0019,
        -5.54352909211480E-0020,
        -3.56122762882219E-0020,
         2.37136106863049E-0021,
         4.45012952334101E-0021,
         1.06204988171399E-0022,
         1.85436061112580E-0022,
         3.78323704078590E-0024,
        -2.18113384323243E-0024,
        -8.46303578835050E-0026,
         4.40010426446112E-0026,
        -1.72007991006717E-0026,
        -8.41074548546749E-0028,
         2.87687662652045E-0028,
        -4.79757800271697E-0028,
         1.04970954081994E-0029,
        -1.91456457130681E-0030,
        -1.65011272563022E-0030,
        -3.12282010667869E-0031,
         2.72126855181466E-0032,
         8.14963238173661E-0033,
        -2.22362148641749E-0033,
        -4.42959518326023E-0033,
        -9.31029244043577E-0035,
         7.37684512852419E-0035,
         1.05533340476200E-0035,
         3.68036439475824E-0035,
        -9.05908692031785E-0038,
        -1.28714526659516E-0036,
        -1.71301803224218E-0038,
         1.16796684016512E-0037,
         1.53971096386038E-0038,
        -2.38261842582774E-0038,
         4.86331275983768E-0008,
        -8.79420088642335E-0010,
         1.12106254543144E-0009,
         2.88357548017345E-0010,
         1.35386436467939E-0010,
        -3.41560913277668E-0012,
        -3.85712413737259E-0012,
         5.34103362850237E-0013,
         4.32138175397010E-0014,
         1.93447157460700E-0017,
        -1.51759295027919E-0014,
         8.03317164287325E-0016,
         6.21521983974719E-0017,
         5.27751564593291E-0018,
        -1.41941540208524E-0017,
         9.45015371189076E-0019,
        -1.12471049649042E-0019,
        -9.00415014547084E-0020,
         2.75044658071564E-0020,
         7.15771029794747E-0023,
         1.57924084351539E-0022,
         1.23207523470791E-0023,
         3.75978514083484E-0023,
        -1.74217854745740E-0024,
         2.75182579444258E-0024,
         6.17602707429647E-0026,
        -1.25550221745088E-0025,
        -9.96300319367528E-0027,
         4.56153643979483E-0027,
        -9.75493873618904E-0029,
        -1.39295413394490E-0028,
         1.14655168739398E-0030,
        -1.41162602246121E-0029,
        -7.19569722136212E-0031,
        -3.53292502672892E-0031,
        -1.26016021869578E-0032,
        -1.96024922908232E-0032,
         1.27984502794719E-0034,
         5.73437057976339E-0034,
        -5.10829719939886E-0035,
        -3.37855695960241E-0035,
         8.93102772051414E-0036,
         4.72897584305043E-0036,
        -5.67692023040007E-0037,
         9.58314726125805E-0038,
         4.96994016171843E-0038,
        -3.12546807886208E-0038,
         1.95738181150256E-0039,
        -4.54538454135532E-0040,
         2.72182693545521E-0040,
         2.61179563380915E-0040,
         2.33691527445905E-0008,
         6.91678663267397E-0010,
        -4.38322209081811E-0009,
        -5.78670813554572E-0011,
         1.12209264354237E-0010,
         2.82253084133744E-0012,
         7.51561466628313E-0013,
         4.79824714871697E-0013,
        -1.93922091036927E-0013,
         8.91079277756704E-0015,
         2.32914164586679E-0015,
         7.42894436154178E-0016,
         1.19589411972565E-0016,
         3.57046697243284E-0018,
        -2.55903776181194E-0018,
         3.90749786593296E-0019,
        -2.79038497910795E-0019,
        -8.15640422739436E-0021,
         3.15177212533974E-0021,
        -8.84870613798489E-0022,
        -8.87959167424313E-0022,
        -2.15795912537575E-0023,
         1.38997955428614E-0023,
        -2.02971897053407E-0024,
        -6.26062629418172E-0025,
        -7.62263896913292E-0027,
         2.55984144485807E-0027,
         5.06401424306171E-0028,
         6.48592957239432E-0028,
        -1.04592195108810E-0028,
         1.09090784145748E-0029,
         2.91440924980499E-0030,
        -3.34346052176909E-0030,
        -1.23891812265437E-0031,
         7.26697391699509E-0032,
        -1.67500588909338E-0032,
         8.83784333609454E-0033,
        -3.60874362858246E-0035,
         6.48237281430553E-0034,
         2.99799024107074E-0035,
        -5.18037816811105E-0035,
        -1.30846404101248E-0037,
         1.59898741283051E-0036,
         1.38430132159157E-0037,
         1.99843293168752E-0037,
         6.60554479057583E-0039,
         1.02048509303323E-0038,
        -2.05383524027995E-0040,
         1.63972862272757E-0039,
         1.71119993002567E-0041,
         1.58719993509628E-0041,
         7.58903797429209E-0042,
        -1.71957053798159E-0043,
         7.43103088406985E-0008,
         1.88435356549358E-0009,
         1.80043498565378E-0009,
         8.07097318263083E-0011,
        -5.82054692516750E-0011,
         3.87029151785488E-0012,
         3.87536398380226E-0012,
         1.69600649368004E-0013,
         1.77039274340285E-0013,
         1.58688246274468E-0014,
         5.55922970749865E-0015,
         5.30943005591945E-0016,
         5.74955051575370E-0017,
        -2.04698570089713E-0018,
         1.19296422475540E-0017,
         1.87124508503462E-0019,
        -3.39343099074548E-0019,
         5.88902024288901E-0021,
         8.76473339887920E-0021,
        -6.64324402957164E-0022,
        -2.39924543604112E-0023,
         3.90174469703727E-0024,
        -2.89064741533191E-0023,
        -6.93639245313351E-0025,
        -6.69286293601382E-0025,
        -4.79961078131898E-0027,
        -1.41245688707387E-0026,
         1.22345543074756E-0027,
         1.38085905341683E-0027,
        -2.02087595641636E-0029,
        -2.93945593660562E-0030,
         5.63439321342842E-0031,
        -1.58787445105710E-0030,
         8.82288628462041E-0033,
         1.65429117836633E-0032,
        -1.50191472924828E-0034,
         4.41909526105745E-0033,
         6.04715863143600E-0035,
         9.96503605461989E-0035,
        -3.14786642434618E-0036,
         3.38212625127427E-0036,
         1.60547761329039E-0037,
         5.91071360116861E-0038,
        -1.11335184328294E-0038,
         1.70496558427429E-0038,
        -7.33607688550887E-0040,
        -2.28331710291943E-0039,
        -7.77661849165455E-0041,
         1.25003469653651E-0040,
         1.18084579147126E-0041,
         6.45749237014352E-0042,
        -1.71639795871568E-0042,
         5.72667356319158E-0043,
         2.08250333928623E-0043,
         7.90216151804629E-0044,
        -7.28559023003627E-0008,
         1.41633572875633E-0009,
        -4.27148870577306E-0010,
        -1.96690099074386E-0010,
        -1.63645109203120E-0010,
         1.04802784090621E-0012,
         1.16396012419229E-0012,
         2.93475883138709E-0014,
         1.33785653989490E-0013,
         5.80833898628616E-0015,
         3.66443853798796E-0015,
         1.90830985694769E-0016,
         1.61664677837490E-0016,
         2.88296441385705E-0018,
         1.33111872546056E-0017,
        -3.71352257093563E-0020,
         5.48836791733869E-0020,
         5.69133773928919E-0021,
        -6.94604182643407E-0021,
        -1.27011082634481E-0022,
         3.58619527438534E-0022,
         6.54202388473265E-0024,
        -8.13523228769555E-0024,
        -3.37383840958509E-0025,
         4.94721497559351E-0025,
         1.65924422529380E-0026,
         2.32209751631447E-0028,
        -9.23463711790730E-0028,
        -8.07399966592988E-0028,
        -2.98906757469984E-0029,
         1.91958468099990E-0030,
        -9.81774630475401E-0031,
        -1.34581952995095E-0030,
         6.10603864659297E-0032,
        -6.96951885924248E-0033,
         2.23737743890886E-0033,
        -2.66785324516951E-0033,
         3.18713681927914E-0035,
         3.06572208330661E-0034,
        -2.71389569460159E-0036,
         5.54949074770550E-0036,
         3.46676464985384E-0037,
         3.87244987483674E-0038,
        -7.88537724032366E-0040,
        -4.74765421344487E-0039,
         5.05245902455820E-0040,
        -2.91126821117666E-0040,
         5.16021233199498E-0041,
        -9.03328366470001E-0041,
        -3.16004313800265E-0042,
        -7.01209572268183E-0042,
         2.48590710828895E-0043,
         7.85684926766418E-0044,
        -3.08637928057648E-0044,
        -1.09671341426310E-0044,
         2.38251159187422E-0045,
        -1.49757871489237E-0045,
        -7.12042210827420E-0008,
        -4.71401919931328E-0010,
         9.24389702365339E-0010,
         1.08627876835680E-0010,
        -6.71267777454086E-0011,
         3.32986330520284E-0012,
        -6.58743072766182E-0012,
        -3.65430014494363E-0013,
         5.22665098204095E-0015,
        -5.18396745355739E-0015,
         4.81048276670167E-0015,
         5.65285429754365E-0017,
         8.47069048233745E-0017,
        -4.74107939043694E-0018,
        -2.73477879196488E-0018,
        -3.74207112079669E-0019,
         2.10543822568315E-0019,
        -2.37078982965812E-0021,
        -1.81513596333200E-0021,
         4.32132430364109E-0022,
         1.81447871313107E-0022,
        -3.32939312570571E-0024,
        -1.65507403936816E-0024,
        -7.11962068581231E-0026,
        -2.12525990621263E-0025,
         2.90305863561658E-0027,
        -1.23810811217620E-0026,
        -3.54776288412468E-0028,
        -1.73850488908674E-0028,
        -1.09965717921611E-0029,
        -1.14686965202682E-0029,
        -1.26183075188138E-0031,
        -9.63223598796405E-0031,
         1.02238700872617E-0032,
        -1.92939491928889E-0032,
        -1.75439927666749E-0034,
        -5.45213313672051E-0034,
        -1.93812625997258E-0035,
         8.35156224751820E-0035,
        -2.62401538847511E-0036,
         2.96893146582775E-0036,
        -1.08563429539038E-0037,
        -5.69082493551409E-0038,
         4.43350058288497E-0039,
         2.07433337327718E-0039,
         3.79724761070128E-0041,
        -3.60251696399865E-0041,
        -3.36698533009109E-0042,
        -6.82497026369816E-0042,
         6.93365050369969E-0043,
         4.49690432029085E-0043,
         6.60875335643263E-0044,
        -2.73311155757553E-0044,
        -2.28724211549377E-0045,
         3.28394963685503E-0046,
         5.05602016801783E-0046,
        -1.48928662366374E-0046,
         1.48577703181773E-0046,
        -5.90909892482586E-0047,
        -2.19468015892977E-0008,
         8.33040808872718E-0010,
        -2.63313333934985E-0009,
        -1.52067006732302E-0010,
         1.78342853869002E-0012,
         1.49805321613495E-0012,
        -4.50198238060400E-0012,
        -5.80924429975586E-0015,
        -2.91753158165517E-0014,
        -5.90562024943461E-0016,
        -2.64469080735550E-0015,
        -9.02960777268625E-0017,
         2.93854534150611E-0017,
         3.32214178309251E-0018,
        -5.06459078748109E-0018,
        -6.33110817490433E-0020,
         5.23004588361662E-0020,
        -2.34935292728370E-0021,
        -7.07569822805442E-0022,
         1.65935360166706E-0023,
        -2.11901362235874E-0022,
        -1.65182655773599E-0024,
         4.46259594227062E-0024,
         4.76516157781270E-0025,
        -2.10317868748586E-0025,
         1.54669152655266E-0026,
         2.11028049376226E-0027,
         1.86546252855735E-0028,
         1.81898090409163E-0028,
        -3.97266764126940E-0030,
        -3.34905120920967E-0030,
        -4.71296300072875E-0031,
         2.97198039971328E-0031,
        -2.16294588083882E-0032,
        -1.12603442449375E-0032,
        -5.66041081240505E-0034,
        -4.13038461705193E-0034,
        -8.65818311789934E-0036,
         2.18718155233209E-0035,
        -1.84231137083287E-0036,
         1.38384488693209E-0036,
        -7.16419973568553E-0038,
        -3.47792246676456E-0038,
        -1.27428239347356E-0039,
        -1.81017246979868E-0039,
         1.41519100644316E-0041,
        -8.50313918278137E-0041,
         2.98560613432530E-0042,
        -2.32556510876165E-0042,
         2.71996113722701E-0043,
        -3.78281736188625E-0043,
        -4.89066831189410E-0045,
         2.78423108876295E-0044,
        -9.68989360104937E-0046,
         1.75385730227038E-0045,
        -9.83187691136303E-0047,
        -2.69994547306860E-0047,
        -3.47032253101918E-0049,
         4.42700603957041E-0048,
        -3.98371617141555E-0049,
         1.82233824862626E-0048,
         1.61126254843834E-0008,
         1.40775322881029E-0009,
        -5.99453400217447E-0009,
         1.13382470767837E-0010,
         9.05020920514501E-0011,
         1.69539633365679E-0012,
        -5.64170184221110E-0012,
         1.38274338633210E-0014,
        -1.33895651243158E-0013,
         2.70913836209183E-0015,
        -4.54603026653881E-0016,
        -1.13204393077953E-0017,
        -3.26505302140622E-0017,
         1.03999236921714E-0018,
        -3.75015835740009E-0018,
         6.96292227368413E-0020,
         3.38668451787177E-0020,
        -2.74972948287327E-0022,
         1.23737826729297E-0021,
         2.51085330915965E-0023,
        -6.64474439274846E-0023,
         1.33123072722802E-0024,
         8.28632740386842E-0024,
         6.61008957029733E-0026,
         1.13725396462465E-0025,
         4.62738244952886E-0027,
         2.84253493328202E-0027,
        -1.73428955794967E-0028,
         5.10996030467314E-0029,
         4.05609239220141E-0030,
        -1.41201851196090E-0030,
        -1.29484763490404E-0031,
         2.64017665908310E-0031,
        -5.50289112835577E-0033,
         1.00651171065653E-0032,
        -3.74950118638449E-0034,
        -1.00920482123950E-0034,
        -1.87356152532909E-0036,
        -4.91633813789362E-0036,
        -5.87652116401737E-0037,
         4.56683136971118E-0037,
        -9.90457679234298E-0039,
        -1.85710814856431E-0039,
        -4.35398324975173E-0040,
        -1.31550277759720E-0039,
         2.95078229449941E-0041,
         2.33154022315772E-0041,
        -2.25881965984228E-0043,
        -5.36749226101136E-0044,
        -1.06519432610446E-0043,
        -5.08311184249212E-0045,
        -3.21284550908213E-0045,
         5.02694268816463E-0045,
         2.79769072088561E-0047,
         4.01002336660271E-0046,
         1.10202411202984E-0047,
         1.26079029766126E-0048,
        -1.47051532422632E-0048,
        -7.93556198635745E-0049,
         4.47456962752702E-0050,
         5.98710020584601E-0051,
        -2.92539461913359E-0050,
        -7.12339592620765E-0051,
         9.19097383306035E-0009,
        -1.43854540379784E-0009,
        -3.12269612043920E-0009,
         9.17544427264876E-0011,
         8.64588388471026E-0012,
        -1.57422483921699E-0012,
         2.36800770305945E-0012,
         9.29002798363709E-0016,
        -1.96122812987894E-0014,
         7.52675404508298E-0015,
        -5.41977602734991E-0016,
        -1.14136829886585E-0017,
        -1.50380279376886E-0016,
        -9.27521516575442E-0019,
        -1.35198051568624E-0019,
         1.45460911039116E-0019,
         3.63900843747891E-0020,
         2.65612461497321E-0021,
         2.59907181894754E-0022,
         4.47693083544077E-0023,
        -4.44633677506190E-0023,
        -1.20026976715970E-0024,
         1.73740706627536E-0024,
        -1.63397769683993E-0025,
         1.43327549642702E-0025,
         4.06131083081932E-0027,
         1.62525151421328E-0027,
        -4.31682513146205E-0029,
         5.52209254708394E-0029,
         4.42709498513926E-0030,
        -1.46724160443488E-0030,
        -1.98349850445073E-0032,
         5.47682422870724E-0033,
        -3.27763612142711E-0034,
         9.56329636074459E-0033,
         6.54392200022351E-0035,
        -8.47428247226585E-0035,
         1.01861114283373E-0036,
        -2.75964153590414E-0036,
         1.11697130228903E-0037,
         7.22419250236686E-0039,
        -3.08493086436509E-0039,
         2.28064531758419E-0039,
        -3.19152964526166E-0040,
        -2.47275738804267E-0040,
         1.08330102133613E-0041,
        -6.01405549211517E-0042,
        -5.90725892387831E-0043,
         4.44761645722233E-0043,
        -5.69348788453226E-0044,
         2.00639156382881E-0044,
         6.00646051233047E-0046,
        -9.37885860729343E-0047,
        -9.16356030251594E-0047,
        -2.28028410305663E-0047,
         5.75595945248770E-0049,
        -1.87374850261834E-0048,
        -2.27364655214753E-0050,
        -2.01100117457187E-0049,
        -3.73664499729213E-0052,
        -3.44921076673119E-0051,
        -1.32898650910193E-0051,
         6.14560235422856E-0052,
         4.90367854514487E-0052,
         2.65669268438005E-0053,
        -5.48418635715454E-0009,
        -6.04775263572833E-0010,
         2.37417489185449E-0009,
        -2.48865102906914E-0011,
        -6.07189545681599E-0011,
        -7.26411522358739E-0013,
         1.52700975338390E-0012,
        -4.02664277012075E-0014,
         8.99963937100721E-0014,
         1.08441196562450E-0015,
         3.23367176347306E-0015,
         3.76366765936072E-0017,
        -6.73231338618232E-0017,
        -2.65594499078157E-0018,
        -2.05887208587719E-0019,
         1.86813872098080E-0020,
         3.46827441869853E-0020,
         3.40560411795552E-0022,
        -4.25700514744440E-0022,
        -3.53625161289153E-0023,
        -2.74116292048551E-0023,
        -1.13303408378435E-0024,
        -6.59349666403918E-0025,
        -1.43738141550015E-0027,
         4.61475086028995E-0026,
         7.88632864627474E-0028,
         1.99835673413320E-0027,
         5.07302254749486E-0029,
         3.42964904619371E-0029,
        -8.09690850462232E-0031,
        -2.03474259174600E-0030,
         2.08903745025147E-0032,
        -1.31892618681131E-0032,
        -4.73641075053756E-0034,
         3.89539422624339E-0033,
        -7.56762623453971E-0035,
         4.99548360987874E-0036,
         2.40899605687491E-0036,
        -2.12356998378547E-0036,
         9.15106681867677E-0038,
        -1.35938748314084E-0037,
         1.66628372710457E-0039,
        -2.86326602473981E-0039,
        -1.55992419761166E-0040,
        -1.81443814564304E-0040,
         0.00000000000000E+0000,
        -7.62483530795751E-0042,
         1.98479995166270E-0043,
        -7.75907834506885E-0044,
         5.38214284848793E-0045,
        -1.17345875062807E-0044,
         4.54293848822515E-0046,
         2.33078564526451E-0046,
        -3.68092455931371E-0047,
         9.84076963590806E-0048,
        -1.08572669240963E-0048,
        -6.56775654916643E-0049,
        -1.87320475875128E-0049,
         2.72944028528249E-0051,
         1.03163145903695E-0051,
        -8.27215595857407E-0051,
         3.57091873727044E-0052,
         1.90265168240664E-0052,
         3.41405633056602E-0053,
        -1.71307430990621E-0053,
        -3.96922110051288E-0055,
         5.73056296386548E-0054,
        -3.70475424286146E-0008,
        -1.34512659114988E-0009,
         6.12969079511336E-0010,
        -2.92448604428314E-0011,
         3.36908696317754E-0011,
        -5.16838070048059E-0013,
         1.95249937573711E-0012,
        -4.06579628798558E-0014,
         3.57221196495853E-0014,
        -3.34337375860767E-0015,
         1.44545273689622E-0015,
         7.47546392106698E-0017,
        -2.17585549287540E-0017,
         1.07878340880532E-0018,
        -9.28304780072159E-0019,
        -5.49444958318414E-0020,
         5.60144344677421E-0021,
         1.14820354186485E-0021,
         2.57875221697515E-0022,
        -2.31554309266723E-0023,
        -1.07831663629111E-0024,
         2.22777095356830E-0025,
         2.53862271453132E-0025,
        -2.22990973455813E-0026,
         1.15742933841351E-0026,
        -1.25649967446449E-0027,
         9.49392001073693E-0028,
        -2.54825882911373E-0030,
        -3.43234862696951E-0030,
         1.66124780354586E-0033,
         4.80100615224755E-0031,
        -4.68912564402328E-0033,
        -5.52454458060214E-0032,
         1.85005489829276E-0034,
        -7.59589847664432E-0034,
        -5.67794728850777E-0035,
         4.00866668419411E-0036,
        -3.88319341059662E-0037,
        -3.71882543554491E-0037,
         4.07158787516620E-0038,
        -6.12182006762578E-0038,
         2.39606710034900E-0039,
        -1.47770479152903E-0039,
         2.30447264437066E-0041,
         3.08548638576824E-0041,
         2.21205976105828E-0044,
        -6.06473051156811E-0042,
         1.07426909089181E-0043,
        -6.42226086946191E-0045,
         4.27847751323923E-0045,
        -3.32904008754850E-0045,
         1.36794316018575E-0046,
        -1.94977153644623E-0046,
         5.89974180470636E-0048,
         2.34116738281998E-0050,
         2.24759261162156E-0051,
        -9.25446257835178E-0049,
        -2.86119132191685E-0051,
        -1.65313276377418E-0050,
        -2.55428048493569E-0051,
        -5.33151524369879E-0053,
        -3.40666131199348E-0053,
         6.02177484855318E-0053,
         3.06898465131586E-0054,
        -4.34357456450737E-0054,
         5.40696952961219E-0055,
         2.20215596314126E-0055,
        -9.70482899588389E-0056,
        -4.99787504015542E-0056,
         7.28861955379755E-0008,
        -3.11870727696029E-0009,
         2.92399788830185E-0009,
        -1.38472299804355E-0010,
         1.17365448911415E-0010,
        -1.33641030303826E-0013,
        -1.52350774546361E-0012,
        -5.60635670247204E-0014,
         9.68439484367639E-0015,
        -2.43863912419943E-0015,
        -1.34286295385431E-0015,
         1.18850455298972E-0017,
        -1.07210462254228E-0017,
         1.80805942583402E-0019,
         5.74014982764781E-0019,
         1.52780939108032E-0020,
         6.00499916295477E-0020,
         2.89148030224248E-0022,
        -1.90221242218592E-0021,
        -2.34719087098527E-0023,
         3.11957543547768E-0023,
        -3.07481105950045E-0025,
        -2.42948034330900E-0025,
        -1.73306735899846E-0027,
        -4.56248819945029E-0026,
        -2.38118078360366E-0028,
         1.14977014979720E-0027,
         1.76130216943281E-0030,
        -2.15845854097158E-0029,
        -9.41086943174200E-0031,
         6.61851632741991E-0031,
        -6.30711518830829E-0033,
        -5.13913089417713E-0033,
         2.69664764109532E-0034,
        -1.86429655817456E-0033,
         1.77364214757265E-0035,
        -2.74983278693434E-0036,
        -8.86025032787405E-0037,
         3.17653020717636E-0038,
         3.48012637178153E-0039,
        -2.45521003371840E-0038,
         1.31819441537042E-0039,
         1.99246603324258E-0040,
        -1.14907305430697E-0041,
        -4.67102867604461E-0042,
        -1.43912071180193E-0042,
        -1.17375093515760E-0042,
         5.40215375284830E-0044,
         5.68984241424259E-0045,
         1.12480360280554E-0045,
         7.39085553170894E-0046,
        -8.38294607962802E-0047,
         5.45093008302735E-0047,
         1.96206810778972E-0048,
        -7.05064909168783E-0048,
        -1.38125985486150E-0049,
        -4.19127818407767E-0049,
         9.86505848162911E-0051,
        -4.98189941519941E-0051,
        -5.04536566062354E-0053,
         2.27268723451511E-0053,
         8.48227593891900E-0054,
         9.18287690142558E-0054,
         1.22274329007031E-0056,
        -3.42368121219688E-0055,
         1.07439488079513E-0055,
        -4.04503251932826E-0056,
        -4.90997679424346E-0057,
        -5.46565134795190E-0058,
        -4.49667713510672E-0058,
        -8.61227993672982E-0058,
        -3.41760149812701E-0009,
        -1.92022583756892E-0010,
         1.02632760283856E-0010,
        -1.08030268721376E-0011,
         6.99019385844196E-0012,
        -1.26147093853574E-0012,
        -3.42292410792404E-0012,
         2.95744745677785E-0014,
        -3.76714304819266E-0014,
        -1.22757449238934E-0015,
        -4.75495675292784E-0016,
        -6.30011683924287E-0018,
         9.45017525886431E-0018,
         8.12731877279763E-0019,
         6.60710087284987E-0019,
         2.34068619730491E-0020,
         9.57553444352009E-0021,
         2.49009343884322E-0022,
         8.06974725551043E-0024,
         2.21784294562660E-0023,
         1.34444461748161E-0023,
         5.31512922264189E-0025,
         1.93702772726562E-0025,
        -2.36364865892271E-0026,
        -3.92230611743517E-0026,
         1.95354261238429E-0028,
         1.10280631344274E-0028,
        -1.93726190535785E-0029,
        -4.76185480333765E-0030,
         7.78763549082717E-0031,
         1.06100465725428E-0031,
         8.85578351055455E-0033,
         1.91595505808917E-0032,
         4.17028646253337E-0034,
        -1.63717582918621E-0034,
         1.95392170439970E-0035,
         1.60579765201952E-0035,
        -2.62852524100961E-0037,
         4.57273855796076E-0037,
        -2.12666565053380E-0038,
        -6.73651400022890E-0039,
         5.52522943656578E-0040,
        -1.15309136067460E-0040,
         2.79238988576395E-0043,
         1.60562418431427E-0041,
        -3.61919772053627E-0043,
        -4.02402968032780E-0043,
         1.15672568969406E-0044,
        -3.50786487350830E-0045,
         3.98606966449998E-0046,
         1.04687904898292E-0045,
         8.12409414716883E-0048,
         4.37388099034443E-0047,
        -1.33065015087416E-0048,
         1.20641254465004E-0048,
         3.50780521959559E-0050,
         2.57466091846045E-0050,
         9.91664240524697E-0052,
        -1.43074449160039E-0051,
        -4.64143259869815E-0053,
        -1.94551067011300E-0053,
        -4.52590815063708E-0054,
         1.67035813829025E-0054,
         3.25139103367495E-0055,
         7.14178377339007E-0056,
         8.16781245507985E-0057,
        -2.78293886973635E-0057,
        -6.52627229206309E-0058,
         5.12109404736051E-0058,
         1.24471046515172E-0059,
        -1.51461610285830E-0058,
         6.23820801844117E-0060,
        -1.40514091504492E-0060
      };
        }

        public double[] Compute(ref double U, // potential
                                ref double[] ss_coord // position of spaceship
                                )
        {
            double[] ret_var = new double[3] { 0.0, 0.0, 0.0 };
            double[] X = new double[3] { 0.0, 0.0, 0.0 };
            double RO = ss_coord[0] * ss_coord[0] + ss_coord[1] * ss_coord[1];
            double RV = Math.Sqrt(ss_coord[2] * ss_coord[2] + RO);
            RO = Math.Sqrt(RO);
            // Нормируем ветор из ЦЗ на аппарат
            X[0] = ss_coord[0] / RV;
            X[1] = ss_coord[1] / RV;
            X[2] = ss_coord[2] / RV;

            double cosL, sinL;

            if (RO > eps)
            {
                cosL = ss_coord[0] / RO;
                sinL = ss_coord[1] / RO;
            }
            else
            {
                cosL = 1;
                sinL = 0;
            }

            RO /= RV;
            double R = Rad / RV;
            U = 0.0;
            double UU = 0.0;
            double U1 = 0.0;
            double VV = 0.0;
            double cosK1L = 1.0;
            double sinK1L = 0.0;
            double cosKL = cosL;
            double sinKL = sinL;
            double PKK = 1.0;
            int NPN = 2, K = 1, NPK1 = 1;
            int N, N1, NPK, N21;
            double DU;
            double V = 0.0;
            double RK = R;
            double VK = 0.0;
            double UK = 0.0;
            double RN = RK;
            double P1 = 0.0;
            double P = PKK;


            if (Math.Abs(GravityConstant) > eps)
            {

                do
                {
                    VK = 0.0;
                    UK = 0.0;
                    RN = RK;
                    P1 = 0.0;
                    P = PKK;
                    N = K;
                    N1 = N + 1;
                    NPK = NPN;
                    do
                    {
                        DU = RN * P;
                        U1 += (EG_coeff[NPK1] * cosK1L + EG_coeff[NPK1 + 1] * sinK1L) * DU;
                        VK += (EG_coeff[NPK] * sinKL - EG_coeff[NPK + 1] * cosKL) * DU;
                        DU = (EG_coeff[NPK] * cosKL + EG_coeff[NPK + 1] * sinKL) * DU;
                        UK += DU;
                        V += N1 * DU;
                        if (N == NHarm)
                            break;
                        RN *= R;
                        DU = P1;
                        P1 = P;
                        N21 = N + N1;
                        P = (N21 * X[2] * P1 - (N + K) * DU) / (N1 - K);
                        N = N1;
                        N1 = N + 1;
                        NPK1 += N21;
                        NPK += N21;
                    }
                    while (N != -1);
                    VV += K * VK;
                    UU += K * UK;
                    U += UK;
                    if (K == NHarm)
                        break;
                    RK *= R;
                    cosK1L = cosKL;
                    sinK1L = sinKL;
                    cosKL = cosK1L * cosL - sinK1L * sinL;
                    sinKL = cosK1L * sinL + sinK1L * cosL;
                    N21 = K + K + 1;
                    PKK = N21 * RO * PKK;
                    NPK1 = N21 + NPN;
                    NPN = NPK1 + 2;
                    K = K + 1;
                }
                while (K != -1);

                U = U * RO;
                V = V * RO;
                RN = R;
                P1 = 1.0;
                P = X[2];
                N1 = 2;
                N = 1;
                NPN = 1;

                do
                {
                    DU = EG_coeff[NPN] * P * RN;
                    U = DU + U;
                    V = N1 * DU + V;
                    if (N == NHarm)
                        break;
                    RN *= R;
                    DU = P1;
                    P1 = P;
                    N21 = N + N1;
                    P = (N21 * X[2] * P1 - N * DU) / N1;
                    N = N1;
                    N1 = N + 1;
                    NPN = NPN + N21;
                }
                while (N != -1);
                DU = GravityConstant / RV;
                U = DU * U;
                DU = -DU / RV;
                UU = U1 * RO - UU * X[2];
                ret_var[2] = (V * X[2] - UU * RO) * DU;
                UU = UU * X[2];
                ret_var[0] = (UU * cosL - VV * sinL + V * X[0]) * DU;
                ret_var[1] = (UU * sinL + VV * cosL + V * X[1]) * DU;
            }
            else
            {
                do
                {
                    VK = 0.0;
                    UK = 0.0;
                    P1 = 0.0;
                    P = PKK;
                    N = K;
                    N1 = N + 1;
                    NPK = NPN;

                    do
                    {
                        U1 += (EG_coeff[NPK1] * cosK1L + EG_coeff[NPK1 + 1] * sinK1L) * P;
                        VK += (EG_coeff[NPK] * sinKL - EG_coeff[NPK + 1] * cosKL) * P;
                        UK += (EG_coeff[NPK] * cosKL + EG_coeff[NPK + 1] * sinKL) * P;
                        if (N == NHarm)
                            break;
                        DU = P1;
                        P1 = P;
                        N21 = N + N1;
                        P = (N21 * X[2] * P1 - (N + K) * DU) / (N1 - K);
                        N = N1;
                        N1 = N + 1;
                        NPK1 = NPK1 + N21;
                        NPK = NPK + N21;
                    }
                    while (N != -1);
                    VV += K * VK;
                    UU += K * UK;
                    U += UK;
                    if (K == NHarm)
                        break;
                    cosK1L = cosKL;
                    sinK1L = sinKL;
                    cosKL = cosK1L * cosL - sinK1L * sinL;
                    sinKL = cosK1L * sinL + sinK1L * cosL;
                    N21 = K + K + 1;
                    PKK = N21 * RO * PKK;
                    NPK1 = N21 + NPN;
                    NPN = NPK1 + 2;
                    K = K + 1;
                }
                while (K != -1);
                U *= RO;
                P1 = 1.0;
                P = X[2];
                N1 = 2;
                N = 1;
                NPN = 1;
                do
                {
                    U += EG_coeff[NPN] * P;
                    if (N == NHarm)
                        break;
                    DU = P1;
                    P1 = P;
                    N21 = N + N1;
                    P = (N21 * X[2] * P1 - N * DU) / N1;
                    N = N1;
                    N1 = N + 1;
                    NPN += N21;
                }
                while (N != -1);
                U *= Rad;
                UU = UU * X[2] - U1 * RO;
                ret_var[2] = -UU * RO * R;
                UU *= X[2];
                ret_var[0] = (UU * cosL + VV * sinL) * R;
                ret_var[1] = (UU * sinL - VV * cosL) * R;
            }
            return ret_var;
        }
    }
    public class Atmosphere
    {
        double KP, F, F81;
        double RO0 = 1.58868e-8;
        double RE = 6378.136;
        double ALF = 0.0033528037;
        double OM = 6.300388008;
        double[] A0 = { 2.57309e+1, 2.75605e+1, 2.85344e+1, 2.91482e+1, 2.94966e+1, 2.97564e+1, 3.00796e+1 },
                  A1 = { -4.23306e-1, -4.66242e-1, -4.88303e-1, -5.02424e-1, -5.10952e-1, -5.17820e-1, -5.27712e-1 },
                  A2 = { 2.62336e-3, 3.00008e-3, 3.17933e-3, 3.29326e-3, 3.36392e-3, 3.42511e-3, 3.52182e-3 },
                  A3 = { -9.29071e-6, -1.08873e-5, -1.15414e-5, -1.19351e-5, -1.21725e-5, -1.23973e-5, -1.27769e-5 },
                  A4 = { 1.83968e-8, 2.20776e-8, 2.32988e-8, 2.39615e-8, 2.43369e-8, 2.47498e-8, 2.54982e-8 },
                  A5 = { -1.91628e-11, -2.35510e-11, -2.46356e-11, -2.51099e-11, -2.53384e-11, -2.56933e-11, -2.64066e-11 },
                  A6 = { 8.20168e-15, 1.03109e-14, 1.06444e-14, 1.07148e-14, 1.07169e-14, 1.08203e-14, 1.10731e-14 },

                  B0 = { 6.49977e-2, 6.50652e-2, 1.65612e-1, -5.89144e-2, 4.44639e-3, -1.40165e-1, -2.04263e-1 },
                  B1 = { -3.06873e-3, -3.02445e-3, -4.35142e-3, -1.35850e-3, -2.19289e-3, -4.65788e-4, 1.36515e-4 },
                  B2 = { 1.95655e-5, 1.93214e-5, 2.51698e-5, 1.21856e-5, 1.58524e-5, 9.29580e-6, 7.80717e-6 },
                  B3 = { -6.66691e-9, -9.73263e-9, -2.25810e-8, -1.94790e-9, -9.50062e-9, -3.94258e-10, 3.04886e-10 },
                  B4 = { -2.07608e-11, -1.22376e-11, -3.53038e-13, -9.95541e-12, -3.79140e-12, -7.30491e-12, -5.95365e-12 },

                  C0 = { -0.132579, -0.132579, -0.548245, -0.548245, -0.545624, -0.545624, -0.552086 },
                  C1 = { 2.98530e-3, 2.98530e-3, 8.20121e-3, 8.20121e-3, 7.57748e-3, 7.57748e-3, 7.16294e-3 },
                  C2 = { -2.25849e-5, -2.25849e-5, -4.01156e-5, -4.01156e-5, -3.34243e-5, -3.34243e-5, -2.92525e-5 },
                  C3 = { 1.20703e-7, 1.20703e-7, 1.14321e-7, 1.14321e-7, 8.38662e-8, 8.38662e-8, 6.48366e-8 },
                  C4 = { -1.24478e-10, -1.24478e-10, -8.71732e-11, -8.71732e-11, -5.59389e-11, -5.59389e-11, -3.80755e-11 },

                  N0 = { 2.058, 2.058, 2.058, 2.058, 2.058, 2.058, 2.058 },
                  N1 = { 5.887e-3, 5.887e-3, 5.887e-3, 5.887e-3, 5.887e-3, 5.887e-3, 5.887e-3 },
                  N2 = { -4.012e-6, -4.012e-6, -4.012e-6, -4.012e-6, -4.012e-6, -4.012e-6, -4.012e-6 },
                  FI = { 0.5411, 0.5515, 0.5585, 0.5585, 0.5585, 0.5585, 0.5585 },

                  D0 = { -6.19071e-2, -6.19071e-2, -2.17106e-1, -2.17106e-1, -1.99696e-1, -1.99696e-1, -1.99696e-1 },
                  D1 = { 3.53963e-3, 3.53963e-3, 6.30628e-3, 6.30628e-3, 6.69745e-3, 6.69745e-3, 6.69745e-3 },
                  D2 = { 4.98912e-6, 4.98912e-6, -5.65614e-6, -5.65614e-6, -7.68966e-6, -7.68966e-6, -7.68966e-6 },
                  D3 = { -6.89196e-9, -6.89196e-9, 2.85734e-9, 2.85734e-9, 4.04246e-9, 4.04246e-9, 4.04246e-9 },

                  E0 = { -0.777916, -0.777739, -0.570476, -0.949573, -0.967598, -1.02278, -0.694824 },
                  E1 = { 6.04070e-3, 5.69090e-3, 2.95802e-3, 8.13121e-3, 8.41991e-3, 9.23633e-3, 5.20601e-3 },
                  E2 = { -5.88566e-6, 1.81832e-6, 1.68896e-5, -3.87813e-6, -3.58500e-6, -6.10128e-6, 1.16681e-5 },
                  E3 = { 6.92343e-8, 3.35689e-8, -4.74756e-9, 2.37694e-8, 1.74801e-8, 1.78211e-8, -1.65494e-8 },
                  E4 = { -9.61190e-11, -5.16839e-11, -1.72711e-11, -2.77469e-11, -1.96221e-11, -1.70073e-11, 5.75301e-12 },
                  E5 = { -0.20902, -0.17156, -0.14825, -0.13287, -0.122241, -0.11460, -0.10524 },
                  E6 = { 9.7533e-2, 7.9830e-2, 6.8808e-2, 6.1603e-2, 5.6538e-2, 5.3178e-2, 4.8551e-2 },
                  E7 = { -1.1817e-2, -9.4393e-3, -7.9836e-3, -7.0866e-3, -6.4324e-3, -6.0436e-3, -5.3567e-3 },
                  E8 = { 1.6145e-3, 1.2622e-3, 1.0535e-3, 9.2813e-4, 8.3723e-4, 7.7982e-4, 6.8809e-4 },
                  T5 = { -0.20807, -0.17087, -0.14770, -0.13240, -0.12183, -0.11423, -0.10493 },
                  T6 = { 9.4449e-2, 7.7599e-2, 6.7052e-2, 6.0105e-2, 5.5232e-2, 5.1994e-2, 4.7573e-2 },
                  T7 = { -8.7953e-3, -7.1375e-3, -6.0951e-3, -5.4388e-3, -4.9580e-3, -4.6876e-3, -4.1711e-3 },
                  T8 = { 8.8385e-4, 6.9025e-4, 5.7456e-4, 5.0585e-4, 4.5512e-4, 4.2548e-4, 3.7068e-4 },

                  K0 = { 0.404286, 0.046976, 0.0218454, -0.0556525, -0.171068, -0.156258, -0.27906 },
                  K1 = { -6.53925e-3, -5.88767e-4, 2.86090e-4, 1.43513e-3, 3.18684e-3, 2.78232e-3, 4.37978e-3 },
                  K2 = { 3.04751e-5, 1.19128e-7, -5.94913e-6, -1.11906e-5, -1.86472e-5, -1.56926e-5, -2.13459e-5 },
                  K3 = { -3.34115e-8, 2.08445e-8, 2.80030e-8, 3.47539e-8, 4.44791e-8, 3.48516e-8, 4.02871e-8 },
                  K4 = { 5.74523e-12, -2.50236e-11, -2.47774e-11, -2.68520e-11, -3.02625e-11, -2.19024e-11, -2.28034e-11 },

                  L0 = { -0.988325, -0.975185, -0.759054, -1.37655, -1.21265, -1.54396, -1.67644 },
                  L1 = { 9.43604e-3, 8.40266e-3, 5.26528e-3, 1.34777e-2, 1.14399e-2, 1.57732e-2, 1.77194e-2 },
                  L2 = { -2.71945e-5, -1.27491e-5, 6.39465e-6, -2.58760e-5, -1.47726e-5, -3.04193e-5, -3.69498e-5 },
                  L3 = { 1.19540e-7, 6.22831e-8, 1.09718e-8, 5.50738e-8, 2.78799e-8, 4.59684e-8, 5.09134e-8 },
                  L4 = { -1.36507e-10, -7.19493e-11, -2.62991e-11, -4.39172e-11, -2.26938e-11, -2.84172e-11, -2.82878e-11 };

        double[] AD = {-1.66718e-2,  -2.44075e-3,   3.08392e-6,  
                                2.90115e-6,  -4.99606e-8,   3.36327e-10,
                              -1.0966e-12,   1.73227e-15, -1.06271e-18 };
        public Atmosphere(double d_KP, double d_F, double d_F81)
        {
            KP = d_KP;
            F = d_F;
            F81 = d_F81;
        }

        public double Compute(double T, double XSC, double YSC, double ZSC, bool KPP = false)
        {
            // calculation of H
            double RMOD = Math.Sqrt(XSC * XSC + YSC * YSC + ZSC * ZSC);
            double ZR = ZSC / RMOD;
            double H = RMOD * 1000 - RE * (1 - ALF * ZR * ZR);

            // cousing of shift by F-index
            int F0, FIND;

            if (F81 <= 87.5)
            {
                F0 = 75;
                FIND = 0;
            }
            else if ((F81 > 87.5) && (F81 <= 112.5))
            {
                F0 = 100;
                FIND = 1;
            }
            else if ((F81 > 112.5) && (F81 <= 137.5))
            {
                F0 = 125;
                FIND = 2;
            }
            else if ((F81 > 137.5) && (F81 <= 162.5))
            {
                F0 = 150;
                FIND = 3;
            }
            else if ((F81 > 162.5) && (F81 <= 187.5))
            {
                F0 = 175;
                FIND = 4;
            }
            else if ((F81 > 187.5) && (F81 <= 225.5))
            {
                F0 = 200;
                FIND = 5;
            }
            else //if(F81>225.5)
            {
                F0 = 250;
                FIND = 6;
            }

            double AA0 = A0[FIND];
            double AA1 = A1[FIND];
            double AA2 = A2[FIND];
            double AA3 = A3[FIND];
            double AA4 = A4[FIND];
            double AA5 = A5[FIND];
            double AA6 = A6[FIND];

            double BB0 = B0[FIND];
            double BB1 = B1[FIND];
            double BB2 = B2[FIND];
            double BB3 = B3[FIND];
            double BB4 = B4[FIND];

            double CC0 = C0[FIND];
            double CC1 = C1[FIND];
            double CC2 = C2[FIND];
            double CC3 = C3[FIND];
            double CC4 = C4[FIND];

            double NN0 = N0[FIND];
            double NN1 = N1[FIND];
            double NN2 = N2[FIND];
            double FFI1 = FI[FIND];

            double DD0 = D0[FIND];
            double DD1 = D1[FIND];
            double DD2 = D2[FIND];
            double DD3 = D3[FIND];

            double EE0 = E0[FIND];
            double EE1 = E1[FIND];
            double EE2 = E2[FIND];
            double EE3 = E3[FIND];
            double EE4 = E4[FIND];
            double EE5, EE6, EE7, EE8;
            if (KPP)
            {
                EE5 = T5[FIND];
                EE6 = T6[FIND];
                EE7 = T7[FIND];
                EE8 = T8[FIND];
            }
            else
            {
                EE5 = E5[FIND];
                EE6 = E6[FIND];
                EE7 = E7[FIND];
                EE8 = E8[FIND];
            }

            double KK0 = K0[FIND];
            double KK1 = K1[FIND];
            double KK2 = K2[FIND];
            double KK3 = K3[FIND];
            double KK4 = K4[FIND];

            double LL0 = L0[FIND];
            double LL1 = L1[FIND];
            double LL2 = L2[FIND];
            double LL3 = L3[FIND];
            double LL4 = L4[FIND];

            // calculatin of sun position
            double CT = (T - 2415020.0) / 36525.0;
            double SZ = 628.33195099 * CT + 1.73993589;
            double XSS = -Math.Cos(SZ);
            double RAB = -Math.Sin(SZ);
            double YSS = 0.91747 * RAB;
            double ZS = 0.397805 * RAB;

            double COS_FI1 = Math.Cos(FFI1);
            double SIN_FI1 = Math.Sin(FFI1);
            double APP = SZ + (T - Math.Truncate(T) - 0.5) * OM;
            double S_APP = Math.Sin(APP);
            double C_APP = Math.Cos(APP);
            double XS = XSS * C_APP + YSS * S_APP;
            double YS = -XSS * S_APP + YSS * C_APP;
            double RS = Math.Sqrt(XS * XS + YS * YS + ZS * ZS);

            double COS_FI = (XSC * (XS * COS_FI1 - YS * SIN_FI1) +
                             YSC * (XS * SIN_FI1 + YS * COS_FI1) + ZSC * ZS) / (RS * RMOD);
            double COS05 = Math.Sqrt(0.5 * (1 + COS_FI));

            double D1913 = T - 2419768.0;
            double DD = D1913 - 1461 * Math.Truncate(D1913 / 1461);
            if (DD == 0)
            {
                DD = 366;
            }
            else
            {
                DD -= 365 * Math.Truncate(DD / 365);
                if (DD == 0)
                    DD = 365;
            }
            DD -= 0.5;

            RAB = LL2 + H * (LL3 + H * LL4);
            RAB = LL0 + H * (LL1 + H * RAB);
            double AK0 = 1 + RAB * (F81 - F0) / F0;
            RAB = CC2 + H * (CC3 + H * CC4);
            RAB = CC0 + H * (CC1 + H * RAB);
            double RAC = NN0 + H * (NN1 + H * NN2);
            double AK1 = 1 + RAB * Math.Exp(RAC * Math.Log(COS05));
            RAB = AD[6] + DD * (AD[7] + DD * AD[8]);
            RAB = AD[4] + DD * (AD[5] + DD * RAB);
            RAB = AD[2] + DD * (AD[3] + DD * RAB);
            double AADD = AD[0] + DD * (AD[1] + DD * RAB);
            RAB = DD1 + H * (DD2 + H * DD3);
            RAB = DD0 + H * RAB;
            double AK2 = 1 + RAB * AADD;
            RAB = BB2 + H * (BB3 + H * BB4);
            RAB = BB0 + H * (BB1 + H * RAB);
            double AK3 = 1 + RAB * (F - F81) / (F81 + Math.Abs(F - F81));
            RAB = EE2 + H * (EE3 + H * EE4);
            RAB = EE0 + H * (EE1 + H * RAB);
            RAC = EE6 + KP * (EE7 + EE8 * KP);
            RAC = EE5 + KP * RAC;
            double AK4 = 1 + RAB * RAC;
            RAB = KK2 + H * (KK3 + H * KK4);
            RAB = KK0 + H * (KK1 + H * RAB);
            RAB = RAB * (1 + ZR * Math.Sin(2 * Math.PI * (DD - 355.0) / 365.24));
            ZR = ZR * ZR * ZR * ZR;
            double AK5 = 1 + RAB * ZR * ZR;
            RAB = AA4 + H * (AA5 + H * AA6);
            RAB = AA2 + H * (AA3 + H * RAB);
            RAB = AA0 + H * (AA1 + H * RAB);

            return RO0 * Math.Exp(RAB) * AK0 * AK1 * AK2 * AK3 * AK4 * AK5;

        }

    }
    public class Magnit
    {
        static short[] PA = { 0, 2, 3, 4, 5, 6, 7, 9, 12, 15, 18, 22, 27, 32, 39, 48,
                 56, 67, 80, 94, 111, 132, 154, 179, 207, 236, 300, 400 };

        static public double ap2kp(double ap)
        {
            int j = 0;
            while (ap < PA[j + 1])
                j++;
            return (j - 1 + (ap - PA[j]) / (PA[j + 1] - PA[j])) / 3;
        }
    }

    /// <summary>
    /// класс инкапсулирует вычисление орбиты движения МКС
    /// </summary> 
    public class OrbitDE
    {
        public System.Data.DataTable m_data;
        const double output_step = 2e-3; // время в секундах задержки записи.
        double last_t;
        double DJ; // Юлианская дата в сутках
        double BK; // ??? коэфициент аэродинамического сопротивления станции
        const double GravityConstant = 398.60044, W = 0.072921151467, EarthRadius = 6.378136;
        int Ngarm = 8;
        double[] Y_start;
        double start_moment;
        void InitTable()
        {
            m_data = new DataTable();
            DataColumn MKS_DataColumn;

            MKS_DataColumn = new DataColumn();
            MKS_DataColumn.DataType = System.Type.GetType("System.Double");
            MKS_DataColumn.ColumnName = "Time";
            MKS_DataColumn.ReadOnly = false;
            MKS_DataColumn.Unique = true;
            m_data.Columns.Add(MKS_DataColumn);

            //==================================================================
            MKS_DataColumn = new DataColumn();
            MKS_DataColumn.DataType = System.Type.GetType("System.Double");
            MKS_DataColumn.ColumnName = "X";
            MKS_DataColumn.ReadOnly = false;
            MKS_DataColumn.Unique = false;
            m_data.Columns.Add(MKS_DataColumn);

            MKS_DataColumn = new DataColumn();
            MKS_DataColumn.DataType = System.Type.GetType("System.Double");
            MKS_DataColumn.ColumnName = "Y";
            MKS_DataColumn.ReadOnly = false;
            MKS_DataColumn.Unique = false;
            m_data.Columns.Add(MKS_DataColumn);

            MKS_DataColumn = new DataColumn();
            MKS_DataColumn.DataType = System.Type.GetType("System.Double");
            MKS_DataColumn.ColumnName = "Z";
            MKS_DataColumn.ReadOnly = false;
            MKS_DataColumn.Unique = false;
            m_data.Columns.Add(MKS_DataColumn);

            //=================================================================
            MKS_DataColumn = new DataColumn();
            MKS_DataColumn.DataType = System.Type.GetType("System.Double");
            MKS_DataColumn.ColumnName = "Xp";
            MKS_DataColumn.ReadOnly = false;
            MKS_DataColumn.Unique = false;
            m_data.Columns.Add(MKS_DataColumn);

            MKS_DataColumn = new DataColumn();
            MKS_DataColumn.DataType = System.Type.GetType("System.Double");
            MKS_DataColumn.ColumnName = "Yp";
            MKS_DataColumn.ReadOnly = false;
            MKS_DataColumn.Unique = false;
            m_data.Columns.Add(MKS_DataColumn);

            MKS_DataColumn = new DataColumn();
            MKS_DataColumn.DataType = System.Type.GetType("System.Double");
            MKS_DataColumn.ColumnName = "Zp";
            MKS_DataColumn.ReadOnly = false;
            MKS_DataColumn.Unique = false;
            m_data.Columns.Add(MKS_DataColumn);
        }
        GraviationField field;
        Atmosphere atm;
        Astronomy.JulianDate date;

        public OrbitDE(OrbitNode knot)
            : this(knot.Time.Day, knot.Time.Month, knot.Time.Year,
                knot.Time.Hour, knot.Time.Minute, knot.Time.Second,
                knot.Position.X, knot.Position.Y, knot.Position.Z,
                knot.Velocity.X, knot.Velocity.Y, knot.Velocity.Z,
                Magnit.ap2kp(knot.Ap), knot.F, knot.F81, knot.Bk)
        { }

        public OrbitDE(int d, int mounth, int y,  // дата
                       int h, int min, double s,  // время
                       double X0, double Y0, double Z0,    // координаты
                       double vX0, double vY0, double vZ0, // скорость              
                       double d_Kp, double d_F, double d_F81, // коэфиценты для атмосферы
                       double d_BK)
        {
            BK = d_BK;
            Y_start = new double[6] { X0, Y0, Z0, vX0, vY0, vZ0 };
            Astronomy.JulianDate dt = new Astronomy.JulianDate(y, mounth, d);
            this.date = dt;
            DJ = dt.GetJD_days(h, min, s);
            start_moment = dt.GetJD_sec(h, min, s);
            InitTable();
            atm = new Atmosphere(d_Kp, d_F, d_F81);
            field = new GraviationField(Ngarm, GravityConstant, EarthRadius);
        }


        public void ODE_right_part(int nVar, double T, ref double[] Y, ref double[] G)
        {
            double[] X = new double[3];
            double[] F = new double[3];

            G[0] = Y[3];
            G[1] = Y[4];
            G[2] = Y[5];

            double R2 = Y[0] * Y[0] + Y[1] * Y[1] + Y[2] * Y[2];
            double R = Math.Sqrt(R2);
            double H = -GravityConstant / (R * R2);
            X[0] = Y[0];
            X[1] = Y[1];
            X[2] = Y[2];
            double A = 0.0;
            F = field.Compute(ref A, ref X);
            A = H + W * W;
            G[3] = A * Y[0] + 2 * W * Y[4] + F[0];
            G[4] = A * Y[1] - 2 * W * Y[3] + F[1];
            G[5] = H * Y[2] + F[2];
            /*  double ROA = atm.Compute(DJ + T / 86.4, Y[0], Y[1], Y[2]);

              A = 1e6 * BK * ROA * Math.Sqrt(Y[3] * Y[3] + Y[4] * Y[4] + Y[5] * Y[5]) / 9.8;
              G[3] = G[3] - A * Y[3];
              G[4] = G[4] - A * Y[4];
              G[5] = G[5] - A * Y[5];*/
        }


        public void ODE_right_part_acc(int nVar, double T, ref double[] Y, ref double[] G)
        {
            double[] X = new double[3];
            double[] F = new double[3];

            var d = new JulianDate(startReb.Year, startReb.Month, startReb.Day);
            var time =  d.GetJD_sec(startReb.Hour, startReb.Minute, startReb.Second);
            Vector3D DV = new Vector3D(0.0d, 0.0d, 0.0d);
            if (T > time && T - time <= DV1.MaxX)
            {
                DV.X = -Math.Abs(DV1.GetValue(T - time));
                DV.Y = Math.Abs(DV2.GetValue(T - time));
                DV.Z = Math.Abs(DV3.GetValue(T - time));
            }

          
            G[0] = Y[3];// +DV.X / 1.0;
            G[1] = Y[4];// +DV.Y / 1.0;
            G[2] = Y[5];// +DV.Z / 1.0;

            double R2 = Y[0] * Y[0] + Y[1] * Y[1] + Y[2] * Y[2];
            double R = Math.Sqrt(R2);
            double H = -GravityConstant / (R * R2);
            X[0] = Y[0];
            X[1] = Y[1];
            X[2] = Y[2];
            double A = 0.0;
       
            F = field.Compute(ref A, ref X);
            A = H + W * W;

            

            Vector3D xOld = new Vector3D(Y[0],Y[1],Y[2]);
           // Vector3D xNew = new Vector3D(Y[0] + G[0]/0.002d, Y[1] + G[1]/0.002d, Y[2] + G[2]/0.002d);
            
            //Local CS axes

            var y = xOld;
            y.Normalize();
            var x = new Vector3D(-G[0], -G[1], -G[2]);//(xNew - xOld);
            x.Normalize();
            var z = Vector3D.CrossProduct(x, y);
            y.Normalize();
            DV = DV*AstronomyMath.CS2toCS1(x,y,z);
            DV *= 0.001d;
            DV /= 0.2d;


            G[3] = A * Y[0] + 2 * W * Y[4] + F[0]+DV.X;
            G[4] = A * Y[1] - 2 * W * Y[3] + F[1] + DV.Y;
            G[5] = H * Y[2] + F[2]+DV.Z;


            /*  double ROA = atm.Compute(DJ + T / 86.4, Y[0], Y[1], Y[2]);

              A = 1e6 * BK * ROA * Math.Sqrt(Y[3] * Y[3] + Y[4] * Y[4] + Y[5] * Y[5]) / 9.8;
              G[3] = G[3] - A * Y[3];
              G[4] = G[4] - A * Y[4];
              G[5] = G[5] - A * Y[5];*/
        }


        public void ODE_output(double T, double H, int nVar, double[] Y)
        {
            if (T - last_t > output_step)
            {
                DataRow MKS_DataRow = m_data.NewRow();
                MKS_DataRow[0] = T;
                for (int q = 0; q < 6; q++)
                    MKS_DataRow[q + 1] = Y[q];
                m_data.Rows.Add(MKS_DataRow);
                last_t = T;
            }
        }

        /// <summary>
        /// Computes an orbit with initial parameters defined in the ctor for time period given as argument (in 1000 seconds)
        /// </summary>
        /// <param name="delta_T"></param>
        public void ComputeOrbit(double delta_T)
        {
            double cur_mom = start_moment;
            RKDP78 rk_met = new RKDP78();
            int num_interval = 0;
            while (cur_mom < delta_T + start_moment)
            {
                rk_met.intergrate(6, ref Y_start, cur_mom, cur_mom + output_step, output_step / 2, 1e-10, false, ODE_right_part, ODE_output);
                cur_mom += output_step;
                num_interval++;
            }
        }

        PolynomialInterpolation DV1; PolynomialInterpolation DV2; PolynomialInterpolation DV3;
        DateTime startReb;

        public void ComputeOrbitWithAccelerations(double delta_T, PolynomialInterpolation DV1, PolynomialInterpolation DV2, PolynomialInterpolation DV3, DateTime startReboost)
        {
            double cur_mom = start_moment;
            RKDP78 rk_met = new RKDP78();
            int num_interval = 0;
            this.DV1 = DV1; this.DV2 = DV2; this.DV3 = DV3;
            this.startReb = startReboost;
            while (cur_mom < delta_T + start_moment)
            {
                rk_met.intergrate(6, ref Y_start, cur_mom, cur_mom + output_step, output_step / 2, 1e-10, false, ODE_right_part_acc, ODE_output);
                cur_mom += output_step;
                num_interval++;
            }
        }
    }
}
