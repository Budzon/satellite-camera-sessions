using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using System.Collections.Generic;
using System.Linq;
using Astronomy;
using System.Windows.Media.Media3D;
using SphericalGeom;
using Common;
using OptimalChain;
using SatelliteSessions;
using DBTables;

namespace GeometryTest
{
    [TestClass]
    public class GeneralTest
    {
        [TestMethod]
        public void TestOrthogonality()
        {
            string cs = System.IO.File.ReadLines("DBstring.conf").First();
            DIOS.Common.SqlManager manager = new DIOS.Common.SqlManager(cs);
            DBTables.DataFetcher fetcher = new DataFetcher(manager);

            DateTime dt1 = DateTime.Parse("1/01/2019 18:31:21");
            DateTime dt2 = DateTime.Parse("3/01/2019 02:00:00");
            var traj = fetcher.GetTrajectorySat(dt1, dt2);
            foreach (var tp in traj)
            {
                Vector3D v = tp.Position.ToVector();
                Console.WriteLine(Vector3D.AngleBetween(v, tp.Velocity));
            }
        }

        [TestMethod]
        public void TestLitSpans()
        {
            DateTime dt1 = DateTime.Parse("01.02.2019 0:47:50");
            DateTime dt2 = DateTime.Parse("01.02.2019 1:39:30");
            //DateTime dt2 = DateTime.Parse("01.02.2019 2:39:30");
            string cs = System.IO.File.ReadLines("DBstring.conf").First();
            DIOS.Common.SqlManager managerDB = new DIOS.Common.SqlManager(cs);


            for (int i = 0; i < 50; i++)
            {
                List<TimePeriod> shadowPeriods;
                List<Tuple<int, List<wktPolygonLit>>> partsLitAndNot;
                Sessions.checkIfViewLaneIsLitWithTimeSpans(managerDB, dt1, dt2, out partsLitAndNot, out shadowPeriods);

                Console.WriteLine(i + " count=" + shadowPeriods.Count);
                if (shadowPeriods.Count != 0)
                    foreach (var loop_wkts in partsLitAndNot)
                        Console.WriteLine(Polygon.getMultipolFromWkts(loop_wkts.Item2.Select(wktlit => wktlit.wktPolygon).ToList()));
                foreach (var period in shadowPeriods)
                    Console.WriteLine(period.dateFrom + " " + period.dateTo);
            }
        }

        [TestMethod]
        public void TestMPZ()
        {
            string cs = System.IO.File.ReadLines("DBstring.conf").First();
            DIOS.Common.SqlManager manager = new DIOS.Common.SqlManager(cs);

            List<RouteParams> param = new List<RouteParams>();
            OptimalChain.StaticConf conf;

            ShootingChannel[] chan = new ShootingChannel[3] { ShootingChannel.pk, ShootingChannel.mk, ShootingChannel.cm };
            WorkingType[] regime = new WorkingType[4] { WorkingType.Shooting, WorkingType.Downloading, WorkingType.Removal, WorkingType.ShootingSending }; // Zi, Vi, Si, Np
            ShootingType[] shooting = new ShootingType[4] { ShootingType.Normal, ShootingType.Stereo, ShootingType.StereoTriplet, ShootingType.Corridor }; // прост, стерео, коридор

            int[] compression = new int[5] { 0, 1, 2, 7, 10 };
            DateTime from = new DateTime(2019, 1, 5);
            DateTime to = from.AddSeconds(5);

            int k = 0;
            foreach (ShootingChannel ch in chan)
                foreach (WorkingType r in regime)
                    foreach (ShootingType s in shooting)
                        foreach (int c in compression)
                        {
                            conf = new StaticConf(k, from, to, 0, 0, 0, null, "", c, 0.3, r, ch, s);
                            RouteParams p = new RouteParams(conf);
                            p.albedo = 0.3;
                            p.coridorAzimuth = 0.5;
                            p.coridorLength = 40000;
                            p.Delta_T = 0;
                            p.duration = 10;
                            p.TNPos = 0;
                            p.binded_route = Tuple.Create(101, 1);
                            param.Add(p);
                            from = to.AddSeconds(70);
                            to = from.AddSeconds(5);
                            k++;
                        }
            var mpzParams = OptimalChain.MPZParams.FillMPZ(param);
            FlagsMPZ flags = new FlagsMPZ();
            var mpzs = mpzParams.Select(p => new MPZ(p, manager, flags));
            string mpz_string = mpzs.Aggregate("", (s, mpz) => s + mpz.ToString() + "\n");
            System.IO.File.WriteAllText(@"mpz_text.txt", mpz_string);
        }

        [TestMethod]
        public void Test123()
        {
            DateTime dt1 = DateTime.Parse("1/01/2019 18:31:21");
            DateTime dt2 = DateTime.Parse("25/02/2019 02:00:00");

            string cs = System.IO.File.ReadLines("DBstring.conf").First();
            DIOS.Common.SqlManager managerDB = new DIOS.Common.SqlManager(cs);
            DBTables.DataFetcher fetcher = new DBTables.DataFetcher(managerDB);

            List<TimePeriod> shadowPeriods;
            List<Tuple<int, List<wktPolygonLit>>> partsLitAndNot;
            Sessions.checkIfViewLaneIsLit(managerDB, dt1, dt2, out partsLitAndNot);//, out shadowPeriods);

            Console.Write("GEOMETRYCOLLECTION(");
            foreach (var w in partsLitAndNot[1].Item2.Where(p => p.sun))
                Console.WriteLine(w.wktPolygon + ",");
            Console.WriteLine(")");

            //List<Vector3D> apexes = new List<Vector3D>
            //{
            //    new Vector3D(0.059364107809225,0.0915947881872375,0.0161908852832645),
            //    new Vector3D(0, 0, 0),
            //    new Vector3D(-0.0594565477007661,-0.0915397912890889,-0.0162303471058849),
            //    new Vector3D(0, 0, 0)
            //};
            //List<Vector3D> verts = new List<Vector3D>
            //{ 
            //    new Vector3D(-0.296533516087929,0.158649692318033,0.941752700534447),
            //    new Vector3D(-0.304617657598805,0.16455144919006,0.938152921036047),
            //    new Vector3D(-0.423538220582993,-0.0185226831269007,0.905688846080801),
            //    new Vector3D(-0.415254211622474,-0.0245453384110222,0.909374216751325)
            //};
            //Polygon sector = new Polygon(verts, apexes);
            //Vector3D sun = new Vector3D(-137110719.321931, -8103830.93502177, -52800945.911062);
            //for (int i = 0; i < 10000; ++i)
            //{
            //    var LitAndNot = SphericalGeom.Polygon.IntersectAndSubtract(sector, SphericalGeom.Polygon.Hemisphere(sun));

            //    LitAndNot.Item1[1].ToWtk();
            //}
            //DateTime dt1 = DateTime.Parse("07/01/2019 00:10:00");
            //DateTime dt2 = DateTime.Parse("17/01/2019 00:40:00");


            //string cs = System.IO.File.ReadLines("DBstring.conf").First();
            //DIOS.Common.SqlManager managerDB = new DIOS.Common.SqlManager(cs);
            //DBTables.DataFetcher fetcher = new DBTables.DataFetcher(managerDB);

            //var laneParts = fetcher.GetViewLaneBrokenIntoTurns(dt1, dt2);

            ////var lanePart = laneParts.Where(lp => lp.Item1 == 222).First();
            //foreach (var lanePart in laneParts)
            //{
            //    var lane = lanePart.Item2;
            //    SphericalGeom.Polygon sector = SatelliteTrajectory.TrajectoryRoutines.FormSectorFromLanePoints(lane, 179, 180);

            //    Vector3D sun = new Vector3D(-137110719.321931, -8103830.93502177, -52800945.911062);
            //    //SphericalGeom.Polygon sector = new Polygon(new List<Vector3D😠) { new Vector3D(-0.296533516087929,0.158649692318033,0.941752700534447),
            //    //new Vector3D(-0.304617657598805,0.16455144919006,0.938152921036047),
            //    //new Vector3D(-0.423538220582993,-0.0185226831269007,0.905688846080801),
            //    //new Vector3D(-0.415254211622474,-0.0245453384110222,0.909374216751325)});
            //    var LitAndNot = SphericalGeom.Polygon.IntersectAndSubtract(sector, SphericalGeom.Polygon.Hemisphere(sun));

            //    foreach (SphericalGeom.Polygon p in LitAndNot.Item1)
            //        foreach (Polygon piece in p.BreakIntoLobes())
            //            piece.ToWtk();
            //    foreach (SphericalGeom.Polygon p in LitAndNot.Item2)
            //        foreach (Polygon piece in p.BreakIntoLobes())
            //            piece.ToWtk();
            //}
        }

        [TestMethod]
        public void TestPiecewiseCoridor()
        {
            string cs = System.IO.File.ReadLines("DBstring.conf").First();
            DIOS.Common.SqlManager manager = new DIOS.Common.SqlManager(cs);


            // -------------------------------- СЕВЕРНОЕ ПОЛУШАРИЕ ПРИМЕР
            // def f(x): return 81.8 + 0.1*np.cos(np.pi/10*x)
            //lons = np.linspace(60, 90, 100)
            //DateTime dt1 = new DateTime(2019, 1, 1, 10, 47, 30);

            //List<string> wkts;
            //List<GeoPoint> satPos;
            //List<GeoPoint> verts = new List<GeoPoint>() {
            //    new GeoPoint(81.7, 90),
            //    //new GeoPoint(81.8, 85),
            //    new GeoPoint(81.9, 80),
            //    //new GeoPoint(81.8, 75),
            //    new GeoPoint(81.7, 70),
            //    //new GeoPoint(81.8, 65),
            //    new GeoPoint(81.9, 60)
            //};    

            /// --------------ЮЖНОЕ
            /// DateTime dt1 = new DateTime(2019, 1, 1, 9, 58, 00);
            /// def f(x):
            ///    return -81.8 - 0.1*sp.sinc((x + 90) / 3)
            ///# lons = np.linspace(-80, -100, 100)

            /// ---------------- СЕВЕР КАВАЙНЫЙ ПРИМЕР
            /// f(x) = 81.8 + 0.05*np.cos(np.pi/5*x)
            /// f(x) = 81.8 + 2e-4*(x - 60) * (x - 90)**2
            /// lons = np.linspace(60, 90, 200)
            /// DateTime dt1 = new DateTime(2019, 1, 1, 10, 47, 30);

            /// ---------------- СЕВЕР САМОПЕРЕСЕЧЕНИЯ
            /// f(x) = 50 + 3*np.cos(np.pi/4*x) + 0.5 * np.sin(x * 3)
            /// lons = np.linspace(-12, -8, 100)
            /// DateTime dt1 = new DateTime(2019, 1, 1, 10, 56, 30);

            // CUSTOM
            //DateTime dt1 = new DateTime(2019, 1, 1, 10, 56, 30);
            DateTime dt1 = new DateTime(2019, 2, 2, 8, 0, 0);
            int steps = 100;
            double ang0 = Math.PI, ang1 = 3 * Math.PI, dang = ang1 - ang0, step = dang / steps;

            //double lon0 = 28, lon1 = 32, dlon = lon1 - lon0, step = dlon / steps;

            double[] lons = new double[steps];
            //for (int i = 0; i < lons.Length; ++i)
            //{
            //    lons[i] = lon0 + step * (lons.Length - i - 1);
            //}
            double[] lats = new double[steps];
            for (int i = 0; i < steps; ++i)
            {
                double t = ang0 + step * i;
                lats[i] = 31 + 0.05 * t * Math.Sin(t);
                lons[i] = 31 + 0.05 * t * Math.Cos(t);
            }

            //for (int i = 0; i < lats.Length; ++i)
            //{
            //    lats[i] = 30.5 + 0.1 * Math.Cos(Math.PI / 4 * lons[i]) + 0.2 * Math.Sin(lons[i] * 3);
            //}

            //for (int i = 0; i < 50; ++i)
            //{
            //    lats[i] = 30.5 + 9e-2 * (lons[i] - lons[0]);
            //}
            //for (int i = 50; i < 75; ++i)
            //{
            //    lats[i] = lats[49] - 15e-2 * (lons[i] - lons[49]);
            //}
            //for (int i = 75; i < 100; ++i)
            //{
            //    lats[i] = lats[74] + 15e-2 * (lons[i] - lons[74]);
            //}

            List<string> wkts;
            //List<GeoPoint> satPos;
            List<GeoPoint> curve = new List<GeoPoint>();
            for (int i = 0; i < lons.Length; ++i)
                curve.Add(new GeoPoint(lats[i], lons[i]));

            // MAKE POLY
            //List<GeoPoint> curve2 = new List<GeoPoint>();
            //for (int i = 0; i < lons.Length; ++i)
            //    curve2.Add(new GeoPoint(lons[i], lats[i] + 3e-2));
            //curve2.Reverse();
            //curve.AddRange(curve2);
            //Polygon p = new Polygon(curve);
            //Console.WriteLine(p.ToWtk());

            // FROM LINESTRING
            SqlServerTypes.Utilities.LoadNativeAssemblies(AppDomain.CurrentDomain.BaseDirectory);
            //string s = "LINESTRING(31.250610351562496 30.694611546632302,31.272583007812496 30.685163937659567,31.313781738281246 30.680439786468128,31.354980468749996 30.687525926582907,31.376953124999996 30.708781226254104,31.382446289062493 30.73947505867949,31.368713378906246 30.77015911578421,31.341247558593743 30.791396195188938,31.286315917968746 30.803192546290973,31.24237060546875 30.800833391884055,31.206665039062496 30.78431768971889,31.176452636718743 30.758358712564487,31.1627197265625 30.720587702897646,31.159973144531243 30.678077624205258,31.173706054687496 30.649727171373314,31.201171874999993 30.623731951630077,31.239624023437493 30.607185902822593,31.283569335937493 30.60009387355008,31.330261230468746 30.60482195075798)";
            //SqlGeography geom = SqlGeography.STGeomFromText(new SqlChars(s), 4326);
            //curve.Clear();
            //for (int i = 1; i < geom.STNumPoints(); i++)
            //{
            //    double lat = (double)geom.STPointN(i).Lat;
            //    double lon = (double)geom.STPointN(i).Long;
            //    curve.Add(new GeoPoint(lat, lon));
            //}

            //FROM POLYGON CENTER LINE
            string wktp = "POLYGON((31.294555664062496 30.510216587229976,31.398925781249996 30.552800413453554,31.46484375 30.619004797647804,31.475830078124996 30.708781226254104,31.4483642578125 30.798474179567833,31.354980468750004 30.859794872560755,31.173706054687496 30.911651004518234,31.025390624999996 30.892797477508168,30.8990478515625 30.85036346950237,30.811157226562496 30.755998458321656,30.7781982421875 30.647364258243186,30.794677734375 30.543338954230222,30.838623046875 30.4297295750316,30.926513671875004 30.32547125932811,30.890808105468746 30.30650325984884,30.849609374999996 30.34917609414984,30.79742431640625 30.41788764107116,30.767211914062504 30.50075098029069,30.745239257812496 30.59772974841202,30.747985839843746 30.699335004371974,30.791931152343746 30.78195807210956,30.85784912109375 30.85036346950237,30.929260253906246 30.8904405255621,31.030883789062496 30.918720119722195,31.143493652343743 30.930500817607793,31.253356933593746 30.918720119722195,31.349487304687496 30.88808351560904,31.42364501953125 30.84800547382291,31.48956298828125 30.791396195188938,31.5032958984375 30.694611546632274,31.495056152343746 30.616641134091196,31.434631347656246 30.555165634175708,31.357727050781246 30.512582844999542,31.3055419921875 30.481817002827285,31.294555664062496 30.510216587229976))";
            //string wktp = "POLYGON((31.052856445312493 29.88113682813284,31.00891113281249 29.80728445022251,30.96771240234374 29.70952491792356,30.932006835937493 29.616445727622548,30.890808105468743 29.516110386062266,30.849609374999993 29.38456832654707,30.849609374999993 29.33669260694549,30.91827392578125 29.255252272863004,30.9814453125 29.226493125990913,31.025390624999996 29.20491846390904,31.050109863281246 29.17614518255975,31.066589355468746 29.14016723304428,31.074829101562496 29.077775612552088,31.102294921875 29.01294430242487,31.151733398437496 28.98411731593083,31.25885009765625 28.95768551837898,31.431884765624996 28.93124697186734,31.63238525390625 28.9023972285585,31.835632324218746 28.904801680303564,32.00592041015625 28.933650754875572,32.17620849609374 28.97690931341242,32.15423583984375 29.00573830949631,31.923522949218746 28.9552822929746,31.758728027343746 28.933650754875572,31.588439941406243 28.945668833650515,31.396179199218746 28.974506534302407,31.228637695312496 28.998531814051802,31.143493652343743 29.039361975917828,31.1187744140625 29.087376785271672,31.102294921875 29.1569585113607,31.07757568359375 29.209713225868185,30.962219238281243 29.27202470909843,30.91827392578125 29.312746310577964,30.8935546875 29.348663646523633,30.8935546875 29.401319510041475,30.953979492187496 29.57106827738255,31.011657714843746 29.728607435707517,31.0418701171875 29.80251790576446,31.07345581054688 29.86922884896832,31.052856445312493 29.88113682813284))";
            //string wktp = "POLYGON((31.681823730468746 31.431006719178512,31.604919433593743 31.41460027631321,31.525268554687493 31.38177878211097,31.459350585937496 31.330178972184655,31.420898437499993 31.266813252320688,31.404418945312493 31.191658003929007,31.409912109374996 31.11644302456945,31.445617675781243 31.04352163068421,31.500549316406243 30.98702796028033,31.585693359374993 30.93756853975414,31.657104492187496 30.885726447651578,31.712036132812496 30.800833391884055,31.744995117187493 30.708781226254104,31.753234863281246 30.6260954420505,31.739501953124996 30.557530797259176,31.698303222656246 30.50075098029069,31.640624999999996 30.453409130203596,31.558227539062496 30.427361303226718,31.48956298828125 30.413150465068867,31.46759033203125 30.453409130203596,31.552734375000004 30.47234863264083,31.610412597656246 30.49601783134129,31.651611328124996 30.53624225473493,31.676330566406246 30.57408532473883,31.6900634765625 30.6260954420505,31.684570312499993 30.699335004371974,31.657104492187496 30.786677249436934,31.618652343749996 30.857437108750233,31.539001464843746 30.918720119722195,31.470336914062496 30.9611238394114,31.409912109375 31.019986671412497,31.374206542968746 31.097629956393973,31.360473632812493 31.186958816798736,31.37420654296874 31.25037814985572,31.390686035156246 31.29263405889955,31.42639160156249 31.34894581557998,31.500549316406243 31.405223877581335,31.582946777343743 31.44506709974827,31.67083740234374 31.475524020001814,31.681823730468746 31.431006719178512))";
            //string wktp = "POLYGON((32.200927734375 31.1376032700213,32.200927734375 30.921076375384914,32.2119140625 30.65681556429287,32.2119140625 30.458144351018106,32.244873046875 30.287531589298723,32.33276367187501 30.192618218499263,32.464599609375 30.145127183376133,32.52502441406249 30.111869849235248,32.55249023437499 30.059585699708222,32.53051757812499 29.997759725578902,32.47558593749999 29.95969381418452,32.41516113281249 29.89304338543417,32.36022949218749 29.79775113417307,32.32177734374999 29.70713934813415,32.31628417968749 29.611670115197384,32.33276367187499 29.506549442788597,32.431640625 29.39174774299279,32.49755859374999 29.353451668635017,32.552490234375 29.305561325527705,32.58544921874999 29.224096165685424,32.5909423828125 29.14736383122664,32.55798339843749 29.080175989623214,32.54699707031249 29.01774801849605,32.55249023437499 28.936054482136683,32.574462890625 28.859107573772988,32.61840820312499 28.78210367383126,32.67333984374999 28.695406284421964,32.74475097656249 28.598991567705653,32.84362792968749 28.478348692223193,32.94799804687499 28.357567857801683,33.08532714843749 28.226970038918353,33.28857421874999 28.033197847676362,33.53027343749999 27.843933386070503,33.76098632812499 27.73216070958091,33.97521972656249 27.64460638194332,34.20043945312499 27.605670826465456,34.28833007812499 27.605670826465456,34.37622070312499 27.630007171411222,34.47509765624999 27.664068965384516,34.55749511718749 27.727298422724658,34.59594726562499 27.819644755099446,34.61791992187499 27.97499795326776,34.70581054687499 28.21728975595707,34.80468749999999 28.36240173523821,34.88159179687499 28.488005204159464,34.89807128906251 28.538687398442562,34.89532470703126 28.584521719370414,34.87884521484376 28.635157471966508,34.85687255859376 28.70745188935186,34.8541259765625 28.77006667259029,34.86785888671875 28.84467368077179,34.88433837890625 28.945668833650515,34.90081787109375 29.056169702743418,34.9420166015625 29.20012347764498,34.98046875 29.29118983818485,35.013427734375 29.39174774299279,35.0408935546875 29.482643134466613,35.04638671875 29.59734192056736,34.95849609375 29.60689427653149,34.9639892578125 29.525670426175836,34.903564453125 29.30077105450428,34.8431396484375 29.14736383122664,34.8046875 29.01294430242487,34.7772216796875 28.863918426224572,34.7662353515625 28.772474183943018,34.7662353515625 28.695406284421964,34.7882080078125 28.608637026615582,34.7991943359375 28.526622418648117,34.7772216796875 28.46386226886915,34.7003173828125 28.362401735238222,34.6234130859375 28.251166905231486,34.573974609375 28.139815912754457,34.52453613281249 28.004101830368683,34.5025634765625 27.877928333679492,34.4586181640625 27.775911526834264,34.354248046875 27.72243591897346,34.16748046875 27.707847106603438,33.94775390625 27.761329874505236,33.7005615234375 27.873072565422788,33.486328125 28.01380137638074,33.2666015625 28.207608595327372,32.9534912109375 28.555576049185973,32.7557373046875 28.80617350885477,32.66235351562499 28.945668833650515,32.65686035156249 29.060971407383875,32.68981933593749 29.142566155107076,32.68981933593749 29.209713225868185,32.66235351562499 29.281607722988355,32.59643554687499 29.35823946572934,32.51403808593749 29.425244985472034,32.4261474609375 29.492206334848717,32.37670898437499 29.544787796199472,32.36022949218749 29.621221113784515,32.376708984375 29.70713934813415,32.4151611328125 29.783449456820605,32.47009277343751 29.85970144212675,32.552490234375 29.935895213372447,32.6239013671875 30.002516938570693,32.63488769531251 30.092860629528147,32.6019287109375 30.1641263431611,32.5030517578125 30.221101852485987,32.354736328125 30.282788098216884,32.288818359375 30.372875188118016,32.2723388671875 30.44393799829116,32.2723388671875 30.53860787885455,32.2723388671875 30.67099079077917,32.266845703125 30.84093113902992,32.26135253906249 30.94463573937753,32.266845703125 31.142304905845748,32.200927734375 31.1376032700213))";
            //string wktp = "POLYGON((31.4813232421875 29.821582720574995,31.585693359375007 29.897805610155885,31.6461181640625 29.988244615509032,31.66259765625 30.121373087823045,31.635131835937504 30.211608223816924,31.547241210937507 30.301760686320705,31.415405273437504 30.38235321766959,31.294555664062504 30.406044269969513,31.173706054687504 30.396568538569383,31.00341796875 30.35865642078879,30.8551025390625 30.287531589298723,30.767211914062504 30.225848323247703,30.712280273437504 30.12612436422458,30.7232666015625 30.03581104266779,30.7232666015625 29.95493454965613,30.706787109375004 29.928754522717014,30.672454833984375 29.91090055463951,30.6353759765625 29.9001866371774,30.592803955078125 29.878755346037977,30.56533813476563 29.845408626428437,30.559844970703125 29.82277415080371,30.563964843750004 29.79179235031134,30.58456420898438 29.76914573606669,30.640869140625 29.738147333955524,30.731506347656243 29.692824739380768,30.797424316406243 29.673735421779128,30.890808105468743 29.67134900220094,30.995178222656243 29.68805274985681,31.10229492187499 29.711910431038035,31.143493652343743 29.573457073017565,30.934753417968743 29.54000879252544,30.82489013671874 29.53283986345339,30.723266601562496 29.55434512574827,30.627136230468743 29.59734192056736,30.547485351562493 29.640320395351395,30.470581054687493 29.714295887474805,30.432128906249993 29.792984135470505,30.44036865234374 29.86684708254215,30.487060546874993 29.92161331969558,30.54473876953124 29.964452850852012,30.599670410156246 29.98348671847468,30.638122558593743 30.000138360580678,30.66284179687499 30.0262995822237,30.660095214843746 30.0714708879013,30.654602050781243 30.12849991669279,30.654602050781243 30.209234673510025,30.671081542968743 30.24245916678936,30.70678710937499 30.278044377800157,30.769958496093743 30.32547125932811,30.860595703124993 30.36813582872057,30.932006835937496 30.39419946205831,31.041870117187493 30.4297295750316,31.146240234374996 30.45577676937485,31.231384277343746 30.46287934170988,31.398925781249993 30.46524675075318,31.4813232421875 30.441570071519465,31.558227539062496 30.39419946205831,31.654357910156246 30.320729603696023,31.712036132812496 30.24245916678936,31.76422119140625 30.145127183376133,31.76422119140625 30.033433263128998,31.72576904296875 29.919232804842153,31.6845703125 29.8620833791186,31.618652343750004 29.800134548359054,31.533508300781246 29.73576244444908,31.4813232421875 29.821582720574995))";
            //string wktp = "POLYGON((31.772460937499996 31.360673191606296,31.7449951171875 31.290287004988542,31.717529296874996 31.240985378021307,31.681823730468746 31.201055678196838,31.626892089843743 31.16110911780646,31.587066650390625 31.14818162280791,31.55685424804687 31.14112951874324,31.51840209960937 31.13525236469775,31.49368286132812 31.128199299111955,31.473083496093754 31.115267317015267,31.45248413085937 31.085869896208337,31.431884765624996 31.050580984217476,31.41403198242187 31.010571059441716,31.39205932617187 30.98349599413146,31.352233886718746 30.963479049959332,31.33163452148437 30.954057859276134,31.316528320312496 30.941102204885524,31.29592895507812 30.902224705171434,31.286315917968746 30.838572911522647,31.2835693359375 30.76071890894447,31.291809082031246 30.718226523201366,31.311035156249996 30.689887857721203,31.322021484375 30.652090026760007,31.322021484375 30.607185902822593,31.308288574218746 30.562260950499436,31.286315917968746 30.5267791821058,31.24237060546875 30.48418395148775,31.20391845703125 30.448673679287566,31.143493652343743 30.42025614284516,31.066589355468746 30.389461136661538,30.978698730468743 30.34680586896208,30.8770751953125 30.320729603696023,30.824890136718754 30.29464639587171,30.78369140625 30.266184073558804,30.7562255859375 30.23771349789203,30.731506347656254 30.20211367909721,30.715026855468754 30.159376896356193,30.709533691406254 30.097613277217135,30.72052001953125 30.047699084516964,30.7177734375 30.0262995822237,30.704040527343754 30.00846313410139,30.673828125000004 29.98348671847468,30.63812255859375 29.947795225672394,30.607910156250004 29.90971017627031,30.574951171875007 29.88113682813284,30.5364990234375 29.833496383743196,30.525512695312493 29.80847605084483,30.525512695312493 29.782257558129416,30.536499023437493 29.758416604879713,30.554351806640618 29.74410930961649,30.583190917968746 29.73337749823706,30.62026977539062 29.728607435707517,30.644989013671864 29.721451916690995,30.66696166992187 29.70475372167263,30.68893432617187 29.68208744429934,30.710906982421868 29.65583589470569,30.73013305664062 29.625996273660775,30.74249267578125 29.610476176740107,30.764465332031246 29.599730094380405,30.8001708984375 29.590177059879466,30.827636718749996 29.592565403314083,30.871582031250004 29.611670115197384,30.912780761718746 29.63196490525779,30.94985961914062 29.65344905046892,30.985565185546875 29.666575993156655,31.01715087890625 29.670155771175345,31.052856445312496 29.66776926665284,31.103668212890625 29.662996087732523,31.13800048828125 29.670155771175345,31.168212890625 29.68328053373365,31.197052001953125 29.695210649161083,31.234130859374996 29.702368038541778,31.28082275390625 29.70952491792356,31.343994140625 29.722644538626326,31.405792236328125 29.73337749823706,31.45523071289062 29.77748982146875,31.475830078124996 29.79179235031134,31.49368286132812 29.80132623415949,31.51565551757812 29.806092835402964,31.536254882812496 29.80728445022251,31.555480957031246 29.80251790576446,31.57333374023438 29.79775113417307,31.583633422851566 29.798346993042585,31.593246459960938 29.80370956317357,31.606292724609375 29.81264654121489,31.620712280273438 29.826348356278118,31.640625000000004 29.84302629154662,31.66122436523438 29.86446525925797,31.679763793945312 29.89542452624056,31.70928955078125 29.88828093315925,31.694869995117188 29.865060720409303,31.671524047851566 29.844217466091493,31.653671264648438 29.825752664242174,31.624832153320316 29.800730393033675,31.609039306640625 29.788812825321074,31.59530639648437 29.78166160346258,31.58294677734375 29.776893838423618,31.57196044921875 29.775105868005724,31.560974121093754 29.775105868005724,31.545181274414066 29.779277749321253,31.53488159179688 29.781065645248304,31.52561187744141 29.781959581239448,31.519088745117188 29.781661603462595,31.512222290039066 29.779873718177598,31.501235961914062 29.774807869832486,31.490592956542972 29.76556948666699,31.470336914062496 29.752455480021382,31.45317077636718 29.73933975744329,31.437377929687496 29.726818603788715,31.427078247070305 29.720259280583463,31.41883850097656 29.71638311536134,31.4102554321289 29.7131031663413,31.40167236328125 29.710717681565328,31.391716003417965 29.70833214011303,31.37763977050781 29.705648338236813,31.36837005615234 29.705051928079484,31.329574584960938 29.698192956710585,31.291122436523438 29.6874562352331,31.25473022460937 29.67850809103362,31.215591430664062 29.673735421779128,31.206665039062507 29.672243916179255,31.197395324707035 29.66926083861543,31.18640899658204 29.6653827055043,31.173019409179688 29.660311075060264,31.162376403808594 29.655537542272,31.134567260742188 29.643304330949547,31.121864318847656 29.638529991546804,31.113967895507812 29.6361427369564,31.094741821289062 29.63524750189552,31.06109619140625 29.6361427369564,31.0198974609375 29.6382315878178,30.999298095703118 29.63614273695643,30.980758666992184 29.630771207229003,30.96359252929687 29.622414924968737,30.943679809570305 29.61346099637062,30.918273925781243 29.602118211647337,30.868835449218746 29.58301169037749,30.847549438476555 29.57166548158945,30.83175659179687 29.56151252974678,30.825576782226562 29.558227532698538,30.816993713378903 29.556435671105078,30.807380676269528 29.556435671105078,30.79296112060547 29.55942208943887,30.780258178710934 29.563901551414418,30.76583862304687 29.570471069643602,30.752449035644528 29.578533076090366,30.73013305664062 29.589579965187113,30.712966918945312 29.59913305622827,30.70060729980469 29.60749126873651,30.69442749023438 29.618534986910703,30.68893432617188 29.631368058011617,30.676231384277344 29.645393033250713,30.643615722656254 29.67552519929751,30.629882812499996 29.689245768482337,30.614776611328132 29.698789407596593,30.596923828125 29.705350133600888,30.570831298828125 29.711314058072844,30.55160522460938 29.715488594438156,30.53581237792969 29.72085560040874,30.518646240234375 29.729203705926665,30.506286621093754 29.742320754135648,30.50079345703125 29.75364773335697,30.49461364746094 29.769145736066676,30.491180419921875 29.78583321163174,30.48980712890625 29.804901206386546,30.493240356445316 29.82456126951844,30.511779785156243 29.856128430046653,30.533752441406243 29.885899621696282,30.565338134765614 29.92161331969558,30.588684082031243 29.94541533710445,30.607910156249993 29.96564257441304,30.635375976562493 29.993002284551082,30.646018981933594 30.00132765670233,30.653228759765625 30.007868530584886,30.65975189208984 30.017084484583904,30.663185119628906 30.0262995822237,30.66421508789062 30.038783186860627,30.66181182861328 30.047401900856684,30.65940856933594 30.069093964438864,30.66009521484375 30.08751362778378,30.65940856933594 30.10949389673229,30.66009521484375 30.126718257700105,30.66078186035156 30.145127183376133,30.663528442382816 30.171843706228557,30.668334960937496 30.192024721805822,30.67588806152344 30.211608223816924,30.69580078125 30.238306719035236,30.709533691406246 30.252542952311444,30.728759765624996 30.272114404809685,30.756912231445316 30.295239273123187,30.79742431640625 30.320136880604423,30.824890136718746 30.336731771512106,30.8551025390625 30.350361185215647,30.890121459960938 30.362211306433352,30.939559936523434 30.374652388663193,30.985565185546875 30.39360718395247,31.03225708007812 30.41078179084589,31.091308593749996 30.434465946141998,31.126327514648438 30.450449500344774,31.184005737304684 30.47234863264083,31.225204467773434 30.50607549756195,31.251296997070312 30.540973445353885,31.26091003417969 30.56048717005504,31.26571655273437 30.583543786271377,31.267776489257812 30.606594920215386,31.269836425781246 30.630231411402463,31.270523071289062 30.651499318326913,31.26502990722656 30.673943701226563,31.26228332519531 30.686344939344224,31.255416870117188 30.705239001430186,31.2396240234375 30.752457968470253,31.238250732421875 30.780778241596465,31.2396240234375 30.807910681366465,31.246490478515625 30.84800547382291,31.25473022460937 30.87983352400539,31.265716552734375 30.92225448145132,31.278076171875 30.945813555175747,31.311035156249996 30.97760909334869,31.339874267578125 30.995268706136343,31.360473632812493 31.00409728661799,31.374893188476555 31.012336557545623,31.38725280761718 31.026459364973974,31.39961242675781 31.052933985705153,31.41128540039062 31.079401242700754,31.433944702148438 31.113503728379627,31.453857421874996 31.13584009649162,31.479263305664062 31.15347035661621,31.51084899902343 31.169334787357997,31.54243469238281 31.17638479276752,31.572647094726562 31.18049705355662,31.59805297851562 31.18813363545435,31.621398925781246 31.198119005254355,31.644744873046875 31.221609836099162,31.65916442871093 31.233940186109834,31.679077148437496 31.253313199457807,31.686630249023434 31.276203454458113,31.693496704101555 31.296741262625233,31.703796386718743 31.326073226258046,31.712036132812496 31.347186583032766,31.722335815429684 31.37122657938575,31.772460937499996 31.360673191606296))";
            string border = "POLYGON((25.3729248046875 31.751525328078912,25.18890380859375 31.70947636001935,25.0653076171875 31.658057274089913,24.88677978515625 31.515337348706993,24.804382324218746 31.39584654193851,24.796142578125 31.21045241900758,24.83734130859375 31.04587480670449,24.8785400390625 30.958768570779853,24.916992187500004 30.897511207369135,24.94720458984375 30.810269662029896,24.936218261718754 30.725309888823375,24.886779785156254 30.607185902822593,24.820861816406254 30.44393799829116,24.72747802734375 30.353916372297036,24.650573730468754 30.278044377800157,24.601135253906254 30.187870144799817,24.609375 30.095236981933013,24.6478271484375 30.02867753290421,24.719238281250004 29.94541533710445,24.798889160156254 29.759608787303804,24.89501953125 29.78583321163174,24.85382080078125 29.9001866371774,24.793395996093754 30.045321590268856,24.76318359375 30.102365696412434,24.7357177734375 30.159376896356193,24.73297119140625 30.202113679097252,24.77691650390625 30.26618407355882,24.84283447265625 30.33258331240559,24.925231933593746 30.401306519203587,24.963684082031254 30.488917676126846,24.993896484375 30.576450026618105,25.02960205078125 30.69224973107187,25.043334960937496 30.812628584773705,25.0323486328125 30.895154371444704,24.98016357421875 31.00586290462421,24.930725097656254 31.121145709156323,24.897766113281254 31.203404950917403,24.884033203125004 31.283245492650792,24.911499023437496 31.391157522824727,24.971923828125 31.461468210801073,25.05706787109375 31.51299585745467,25.20538330078125 31.585554792786397,25.367431640624996 31.653381399664,25.3729248046875 31.751525328078912))";
            string mideter = "POLYGON((34.639892578125 31.924192605327704,34.56298828124999 31.779547369387316,34.4696044921875 31.63935236489621,34.33776855468749 31.475524020001814,34.1949462890625 31.344254455668064,33.9697265625 31.217499361938152,33.6785888671875 31.14700630855657,33.4368896484375 31.114091594898696,33.145751953125 31.090574094954192,32.90954589843749 31.095278060807942,32.772216796875 31.095278060807942,32.6568603515625 31.114091594898696,32.56347656249999 31.17050982470346,32.45361328124999 31.245681880715537,32.3052978515625 31.367708915120843,32.2283935546875 31.433350262414407,32.14050292968749 31.48489338689015,31.970214843749993 31.58321506275729,31.783447265625 31.634675549541356,31.508789062499996 31.662732913235317,31.250610351562496 31.662732913235317,31.003417968749996 31.63935236489621,30.701293945312496 31.587894464070388,30.503540039062496 31.53640812943962,30.294799804687493 31.46615371502429,30.009155273437493 31.325486676506983,29.718017578124996 31.14700630855657,29.4873046875 30.99173704508671,29.311523437500004 30.86922534804083,29.3609619140625 30.83149788130794,29.558715820312496 30.96818929679425,29.734497070312496 31.09998179374942,29.970703125 31.245681880715537,30.2069091796875 31.367708915120843,30.4705810546875 31.475524020001814,30.7342529296875 31.54108987958581,31.091308593749996 31.597252561706654,31.393432617187504 31.61128794539509,31.734008789062496 31.587894464070388,32.025146484375 31.503629305773032,32.27783203125 31.330178972184655,32.49755859375 31.156408414557006,32.5909423828125 31.076460800121126,32.6953125 31.048227924549792,33.079833984375 31.029401353028902,33.497314453125 31.057639814130127,33.9202880859375 31.13290140110334,34.10705566406251 31.217499361938152,34.310302734375 31.372399104880515,34.4915771484375 31.569175449070897,34.5904541015625 31.728167146023935,34.639892578125 31.924192605327704))";
            //string mideter = "POLYGON((34.70581054687501 32.08722870829665,34.5684814453125 31.788886163788476,34.39270019531251 31.564495107991192,34.10705566406251 31.330178972184655,33.72253417968751 31.208103321325254,33.2720947265625 31.1376032700213,32.85461425781251 31.128199299111998,32.47558593750001 31.19400750999884,32.222900390625 31.330178972184655,32.0416259765625 31.470838984764413,31.860351562500004 31.55513372117207,31.558227539062504 31.606609719226924,31.234130859375004 31.634675549541356,30.728759765625004 31.587894464070388,30.311279296875 31.503629305773032,29.943237304687504 31.330178972184655,29.586181640625 31.109388560814963,29.086303710937504 30.883369321692243,29.113769531249993 30.755998458321656,29.443359374999993 30.86922534804083,29.734497070312496 31.01057105944173,30.003662109375 31.175209828310855,30.272827148437493 31.311408386201634,30.635375976562493 31.456782472114313,31.069335937499996 31.508312698943456,31.431884765624996 31.508312698943456,31.783447265624993 31.452096498983664,32.21191406249999 31.203404950917403,32.59094238281249 31.024694128525127,33.013916015625 31.00115451727899,33.37646484375 31.019986671412497,33.7884521484375 31.085869896208337,34.1949462890625 31.21280145833883,34.4366455078125 31.391157522824727,34.5904541015625 31.629998499002582,34.78271484375 31.970803930433107,34.8321533203125 32.077920173788286,34.70581054687501 32.08722870829665))";
            Polygon p = new Polygon(wktp);
            //curve = p.getCenterLine();

            var ccurve = new SatelliteTrajectory.Curve(curve);
            var parts = ccurve.BreakByCurvatureAndDistance(3.5e5);
            string cline = ccurve.ToWkt();
            //foreach (var part in parts)
            //    Console.WriteLine(part.ToWkt());
            Sessions.getPieciwiseCoridor(dt1, curve, manager, out wkts, 3.5e5);//, out satPos, custom: true);
            //Console.WriteLine(wkts.Aggregate("['" + mideter + "'", (tail, wkt) => tail + ", '" + wkt + "'") + "]");
            //Console.WriteLine(satPos.Aggregate("[", (tail, pos) => tail + ", (" + pos + ")") + "]");
            Console.WriteLine(wkts.Aggregate("GEOMETRYCOLLECTION("+cline, (tail, wkt) => tail + "," + wkt) + ")");
        }

        [TestMethod]
        public void Test_req312()
        {
            string cs = System.IO.File.ReadLines("DBstring.conf").First();
            DIOS.Common.SqlManager manager = new DIOS.Common.SqlManager(cs);

            List<string> wkts;
            List<GeoPoint> curve = new List<GeoPoint>();

            DateTime dt1 = new DateTime(2019, 1, 13, 8, 29, 30);
            var fetcher = new DBTables.DataFetcher(manager);

			var sat = GeoPoint.FromCartesian(fetcher.GetSingleSatPoint(dt1).Value.Position.ToVector());

            SqlServerTypes.Utilities.LoadNativeAssemblies(AppDomain.CurrentDomain.BaseDirectory);
            string wktp = "POLYGON((31.9317626953125 31.557474155953216,31.720275878906254 31.53640812943962,31.5911865234375 31.48489338689015,31.4208984375 31.54108987958581,31.291809082031254 31.62298248226682,30.970458984374996 31.690781806136826,30.745239257812504 31.63233705366872,30.47332763671875 31.58321506275729,30.325012207031254 31.49191979634118,30.39093017578125 31.339562861785026,30.487060546874996 31.4825511331225,30.830383300781246 31.57853542647338,31.008911132812496 31.592573630393318,31.214904785156246 31.569175449070897,31.368713378906246 31.477866449675858,31.54998779296875 31.39350206165392,31.676330566406254 31.400535326863945,31.79168701171875 31.452096498983664,31.887817382812504 31.5012875211967,32.03063964843751 31.503629305773032,32.14599609375 31.498945677962936,32.15972900390625 31.550452675471504,31.9317626953125 31.557474155953216))";
            //string wktp = "POLYGON((29.860839843749996 31.17990959866414,29.783935546875 31.121145709156323,29.68505859375 31.074108380573307,29.5697021484375 31.04116839649143,29.4049072265625 31.0341083449035,29.234619140624996 31.04352163068421,29.09454345703125 31.074108380573307,28.97369384765625 31.078813161461056,28.85833740234375 31.062345409804408,28.745727539062504 31.022340429043638,28.63311767578125 30.94699135645719,28.5699462890625 30.866867816140285,28.605651855468746 30.85036346950237,28.638610839843746 30.8904405255621,28.6798095703125 30.942280064232108,28.73748779296875 30.970544333076077,28.79241943359375 31.00586290462421,28.850097656249996 31.019986671412497,28.940734863281246 31.0341083449035,29.05609130859375 31.038815104128687,29.130249023437496 31.029401353028902,29.28680419921875 31.008217011100186,29.410400390625004 30.99409150031616,29.5806884765625 31.017632855634176,29.759216308593746 31.07175590282013,29.838867187499996 31.114091594898696,29.902038574218746 31.168159735435708,29.860839843749996 31.17990959866414))";
            Polygon p = new Polygon(wktp);
            curve = p.getCenterLine();
            var ccurve = new SatelliteTrajectory.Curve(curve);
            string cline = ccurve.ToWkt();

            Sessions.getPieciwiseCoridor(dt1, curve, manager, out wkts, 3.5e5);
            Console.WriteLine(wkts.Aggregate("GEOMETRYCOLLECTION(" + "POINT(" + sat.Longitude.ToString().Replace(",", ".") + " " + sat.Latitude.ToString().Replace(",", ".") + ")," + wktp + ',' + cline, (tail, wkt) => tail + "," + wkt) + ")");
        }

        [TestMethod]
        public void TestCoridorPoly()
        {
            string cs = System.IO.File.ReadLines("DBstring.conf").First();
            DIOS.Common.SqlManager manager = new DIOS.Common.SqlManager(cs);

            DateTime dt1 = new DateTime(2019, 1, 1, 10, 47, 30);
            string wkt;
            double dur, dist = 50e3;
            double roll = 0, pitch = 0, az = 0;
            SatelliteSessions.Sessions.getCoridorPoly(
                dt1,
                AstronomyMath.ToRad(roll), AstronomyMath.ToRad(pitch),
                dist, AstronomyMath.ToRad(az),
                manager, out wkt, out dur);
            Console.WriteLine(wkt);
            SatelliteSessions.Sessions.getCoridorPoly(
                dt1,
                AstronomyMath.ToRad(roll), AstronomyMath.ToRad(pitch),
                new GeoPoint(6.32, 143.55),
                manager, out wkt, out dur, out dist);
            Console.WriteLine(wkt);
        }

        [TestMethod]
        public void TestGetCaptureConfArrayOnRandomPolygons()
        {
            for (int testi = 0; testi < 1; testi++)
            {
                List<Polygon> polygons = new List<Polygon>();
                Random rand = new Random((int)DateTime.Now.Ticks);
                for (int i = 0; i < 10; i++)
                {
                    Polygon randpol = getRandomPolygon(rand, 3, 8, 2, 8);
                    polygons.Add(randpol);
                }

                string cs = System.IO.File.ReadLines("DBstring.conf").First();
                DIOS.Common.SqlManager manager = new DIOS.Common.SqlManager(cs);

                DateTime dt1 = new DateTime(2019, 1, 4);
                DateTime dt2 = new DateTime(2019, 1, 8);

                var inactivityRanges = new List<TimePeriod>();
                inactivityRanges.Add(new TimePeriod(new DateTime(2019, 1, 5), new DateTime(2019, 1, 6)));


                DataFetcher fetcher = new DataFetcher(manager);
                Trajectory trajectory = fetcher.GetTrajectorySat(dt1, dt2);

                if (trajectory.Count == 0)
                    throw new Exception("На эти даты нет траектории в БД, тест некорректный");

                try
                {
                    int id = 0;
                    List<RequestParams> requests = new List<RequestParams>();
                    foreach (var pol in polygons)
                    {
                        RequestParams reqparams = new RequestParams(id, 1, dt1, dt2, AstronomyMath.ToRad(45), 0.4, 1, 1, pol.ToWtk());
                        requests.Add(reqparams);
                        id++;
                    }
                    var res = Sessions.getCaptureConfArray(requests, dt1, dt2, manager, inactivityRanges, new List<TimePeriod>());
                }

                catch (Exception ex)
                {
                    List<string> lines = new List<string>();
                    Console.WriteLine("Ошибка обнаружена на следующем наборе полигонов:");
                    foreach (var pol in polygons)
                    {
                        Console.WriteLine(pol.ToWtk());
                        lines.Add(pol.ToWtk());
                    }
                    System.IO.File.WriteAllLines(@"badPolygons.txt", lines);
                    throw ex;
                }
            }
        }


        [TestMethod]
        public void Test_getMPZArray()
        {
            List<Polygon> polygons = new List<Polygon>();
            Random rand = new Random((int)DateTime.Now.Ticks);
            for (int i = 0; i < 2; i++)
            {
                Polygon randpol = getRandomPolygon(rand, 3, 6, 2, 4);
                polygons.Add(randpol);
            }

            string cs = System.IO.File.ReadLines("DBstring.conf").First();
            DIOS.Common.SqlManager manager = new DIOS.Common.SqlManager(cs);

            DateTime dt1 = new DateTime(2019, 1, 4);
            DateTime dt2 = new DateTime(2019, 1, 4, 20, 0, 0);

            DataFetcher fetcher = new DataFetcher(manager);
            Trajectory trajectory = fetcher.GetTrajectorySat(dt1, dt2);

            if (trajectory.Count == 0)
                throw new Exception("На эти даты нет траектории в БД, тест некорректный");

            try
            {
                int id = 0;
                List<RequestParams> requests = new List<RequestParams>();
                foreach (var pol in polygons)
                {
                    RequestParams reqparams = new RequestParams(id, 1, dt1, dt2, AstronomyMath.ToRad(45), 0.4, 1, 1, pol.ToWtk());
                    requests.Add(reqparams);
                    id++;
                }
                //  var res = Sessions.getCaptureConfArray(requests, dt1, dt2, manager, new List<Tuple<DateTime, DateTime>>());

                Order order = new Order();
                order.captured = new Polygon("POLYGON ((2 -2, 2 2, -2 2, -2 -2, 2 -2))");
                order.intersection_coeff = 0.1;
                order.request = new RequestParams(id, 1, dt1, dt2, AstronomyMath.ToRad(45), 0.4, 1, 1, "POLYGON ((2 -2, 2 2, -2 2, -2 -2, 2 -2))");

                List<Order> orders = new List<Order>() { order };

				CaptureConf ccToDrop = new CaptureConf(new DateTime(2019, 1, 4), new DateTime(2019, 1, 5), 0.1, orders, WorkingType.Downloading, null);

                StaticConf sc = ccToDrop.DefaultStaticConf();
                RouteParams routeParamtoDrop = new RouteParams(sc);
                routeParamtoDrop.id = 0;
                routeParamtoDrop.start = new DateTime(2019, 1, 4);
                routeParamtoDrop.end = new DateTime(2019, 1, 5);
                routeParamtoDrop.File_Size = 1000;
                routeParamtoDrop.binded_route = new Tuple<int, int>(1, 1);
                // double timedrop = routeParam.getDropTime();

                RouteMPZ routempzToDrop = new RouteMPZ(routeParamtoDrop, manager) { NPZ = 0, Nroute = 0 };

                List<RouteMPZ> routesToDrop = new List<RouteMPZ>();
                routesToDrop.Add(routempzToDrop);


				CaptureConf ccToDelete = new CaptureConf(new DateTime(2019, 1, 4), new DateTime(2019, 1, 5), 0.1, orders, WorkingType.Removal, null);

                StaticConf scToDelete = ccToDelete.DefaultStaticConf();
                RouteParams routeParamtoDelete = new RouteParams(scToDelete);
                routeParamtoDelete.id = 0;
                routeParamtoDelete.start = new DateTime(2019, 1, 4);
                routeParamtoDelete.end = new DateTime(2019, 1, 5);
                routeParamtoDelete.File_Size = 1000;
                routeParamtoDelete.binded_route = new Tuple<int, int>(1, 1);
                RouteMPZ routempzToDelete = new RouteMPZ(routeParamtoDelete, manager) { NPZ = 0, Nroute = 0 };

                List<RouteMPZ> routesToDelete = new List<RouteMPZ>();
                routesToDelete.Add(routempzToDelete);

                List<Tuple<DateTime, DateTime>> silenceRanges = new List<Tuple<DateTime, DateTime>>();
                // silenceRanges.Add(Tuple.Create(new DateTime(2019, 1, 6), new DateTime(2019, 1, 9)));
                //silenceRanges.Add(Tuple.Create(new DateTime(2019, 1, 6), new DateTime(2019, 1, 6)));


                var inactivityRanges = new List<Tuple<DateTime, DateTime>>();
                // inactivityRanges.Add(Tuple.Create(new DateTime(2019, 1, 5), new DateTime(2019, 1, 6))); 


                List<MPZ> mpzArray;
                List<CommunicationSession> sessions;

                Sessions.getMPZArray(requests, dt1, dt2
                                                    , silenceRanges
                                                    , inactivityRanges
                                                     , routesToDrop
                                                     , routesToDelete
                                                      , manager
                                                      , 0
                                                     , out mpzArray
                                                     , out sessions);
            }

            catch (Exception ex)
            {
                List<string> lines = new List<string>();
                Console.WriteLine("Ошибка обнаружена на следующем наборе полигонов:");
                foreach (var pol in polygons)
                {
                    Console.WriteLine(pol.ToWtk());
                    lines.Add(pol.ToWtk());
                }
                System.IO.File.WriteAllLines(@"badPolygons.txt", lines);
                throw ex;
            }

        }



        [TestMethod]
        public void Test_lalala()
        {
            List<Vector3D> apexes = new List<Vector3D>
            {
                new Vector3D(-0.0593525794717557, 0.0941882004842364, 0.0196600456640166),
                new Vector3D(0, 0, 0),
                new Vector3D(0.0593045994499921, -0.0942399266314301, -0.0195914281521589),
                new Vector3D(0, 0, 0)
            };
            List<Vector3D> verts = new List<Vector3D>
            {
                new Vector3D(-0.730545424523264, -0.187609127558738, -0.656586778700861),
                new Vector3D(-0.724896220800108, -0.182448169302371, -0.6642575815058),
                new Vector3D(-0.606294408140034, -0.37093472824611, -0.70343053533317),
                new Vector3D(-0.611833436258731, -0.375979264421929, -0.69591625861204)
            };
            Polygon sector = new Polygon(verts, apexes);
            Console.WriteLine(sector.ToWtk());
            Vector3D sun = new Vector3D(-58768565.9483816, -122462917.87933, -56462513.2794596);
            var gp = GeoPoint.FromCartesian(sun);
            for (int i = 0; i < 10000000; ++i)
            {
                Polygon[] hemi = Polygon.Hemisphere(sun);
                //Console.WriteLine("-------------------------");
                //Console.WriteLine(hemi[0].ToWtk());
                //Console.WriteLine(hemi[1].ToWtk());
                var inter = Polygon.IntersectAndSubtract(sector, hemi);
                //Console.WriteLine("--");
                foreach (var p in inter.Item1)
                {
                    double a = p.Area;
                }
                //Console.WriteLine("--");
                foreach (var p in inter.Item2)
                {
                    double a = p.Area;
                }
            }
        }

        [TestMethod]
        public void TestIsRequestFeasible()
        {
            SqlServerTypes.Utilities.LoadNativeAssemblies(AppDomain.CurrentDomain.BaseDirectory);
            for (int testi = 0; testi < 20; testi++)
            {

                List<Polygon> polygons = new List<Polygon>();
                Random rand = new Random((int)DateTime.Now.Ticks);
                for (int i = 0; i < 10; i++)
                {
                    Polygon randpol = getRandomPolygon(rand, 3, 12, 2, 8);
                    polygons.Add(randpol);
                }

                string cs = System.IO.File.ReadLines("DBstring.conf").First();
                DIOS.Common.SqlManager manager = new DIOS.Common.SqlManager(cs);

                DateTime dt1 = new DateTime(2019, 1, 5);
                DateTime dt2 = new DateTime(2019, 1, 6);

                DataFetcher fetcher = new DataFetcher(manager);
                Trajectory trajectory = fetcher.GetTrajectorySat(dt1, dt2);

                if (trajectory.Count == 0)
                    throw new Exception("На эти даты нет траектории в БД, тест некорректный");


                foreach (var pol in polygons)
                {
                    //try
                    //{
                    RequestParams reqparams = new RequestParams(0, 1, dt1, dt2, AstronomyMath.ToRad(45), 0.4, 1, 1, pol.ToWtk());

                    double cover;
                    List<CaptureConf> output;
                    Sessions.isRequestFeasible(reqparams, dt1, dt2, manager, out cover, out output);
                    //}
                    //catch (Exception ex)
                    //{
                    //    List<string> lines = new List<string>();
                    //    Console.WriteLine("Ошибка обнаружена на следующем полигонt:");
                    //    Console.WriteLine(pol.ToWtk());
                    //    lines.Add(pol.ToWtk());
                    //    System.IO.File.WriteAllLines(@"badPolygons.txt", lines);
                    //    throw ex;
                    //}

                }
            }

        }

        /// <summary>
        /// генерируем случайный полигон
        /// </summary>
        /// <param name="minVertNumb"> минимальное колво вершин </param>
        /// <param name="maxVertNumb"> максимальное колво вершин </param>
        /// <param name="minBoundSize"> минимальный размер полигона (коробочный) в градусах</param>
        /// <param name="maxBoundSize"> максимальный размер полигона (коробочный) в градусах</param>
        /// <returns>полигон</returns>
        public static Polygon getRandomPolygon(Random rand, int minVertNumb, int maxVertNumb, double minBoundSize, double maxBoundSize)
        {
            double lat0 = (double)rand.Next(-90, 90);
            double lon0 = (double)rand.Next(-179, 180);

            double a = (double)rand.Next((int)(minBoundSize) * 10, (int)(maxBoundSize * 10)) / 10;
            double b = (double)rand.Next((int)(minBoundSize) * 10, (int)(maxBoundSize * 10)) / 10;

            int vertNum = rand.Next(minVertNumb, maxVertNumb);

            SortedDictionary<double, Vector3D> verts = new SortedDictionary<double, Vector3D>();

            double minDist = AstronomyMath.ToRad(0.1);// Math.Min(Math.PI / 10, Math.PI * 2 / vertNum); // не дадим генерировать точки слишком близко к друг другу.

            for (int i = 0; i < vertNum; i++)
            {
            Begin:
                double t = (double)(rand.Next(0, (int)(2 * Math.PI * 100))) / 100;
                double lat = lat0 + a * Math.Cos(t);
                double lon = lon0 + b * Math.Sin(t);
                Vector3D vert = GeoPoint.ToCartesian(new GeoPoint(lat, lon), 1);
                foreach (var item in verts) // проверим, нету ли слишком близкой точки
                {
                    if (GeoPoint.DistanceOverSurface(item.Value, vert) < minDist)
                        goto Begin; // да, это goto.
                }
                verts[t] = vert;
            }

            return new Polygon(verts.Values.ToList<Vector3D>());
        }
    }
}
